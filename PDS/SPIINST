


                              SPI
               Installation and Customization Guide



Chapter  1

Installation Procedures

System Requirements

There are no specific hardware requirements.

Software requirements:

* MVS 5.2.2 or above including all versions of OS/390
* ISPF version 3.5
* CA-Top Secret 5.0 or 5.1.  There are no known incompatabilities
  with CA-Top Secret 4.4, but all testing has been done with
  version 5.1

Initial Installation Steps

There are no pre-installation requirements.  A summary of the
installation steps are given below:

Step 1: Unload the EMAILed files to your installation datasets.
Step 2: Copy REXX EXEC TSSU to a local CLIST or REXX library or
        include the DSNs you unloaded above in your SYSPROC or
        SYSEXEC ISPF concatenation.
Step 3: Determine SMFID and JESNODE of your system and create the
        T$$xxxx member

Step 4: Customize the installation datasets to your
        installation's requirements.

Details on how to perform each step are given on the following
pages.



Step 1.

Save the EMAIL attachments to your hard drive as the following
files:
       rexx.xmt
       parmlib.xmt
       panel.xmt

2 Transfer the Files to your MVS system making sure that the MVS
  files have these attributes DSORG= PS  RECFM= FB  LRECLl= 80
  BLKSIZE= 3120 and have at least 7 cylinders of space. Your
  transfer program probably specifies these options in the
  background so you may have to adjust these parameters there. This
  would be done in  PC3270 by selecting the transfer pull down
  option, the setup option, the define transfer setup option, and
  specifying the above options in addition to what would normally
  be specified for a binary transfer.  Be sure to specify a binary
  transfer.

For the sake of example this documentation I assume that these
are the source and resulting MVS filenames

If you change these names just note what they are for the next
step of the process.

rexx.xmt        =====> SPI.REXX.XMIT
parmlib.xmt     =====> SPI.PARMLIB.XMIT
panel.xmt       =====> SPI.PANEL.XMIT

3 Logon to the ISPF on the MVS system that has received the files
  and issue the following command for each file you selected to
  transfer specifying the names you used as output above.

TSO receive indsname('SPI.REXX.XMIT')
You should receive the following prompt:
Dataset G104228.SPI.V5.REXX from G104228 on ????????
Enter restore parameters or 'DELETE' or 'END' +
Reply as follows substituting your desired output dataset name
Dataset('my.output.rexxfile')

Step 2.

Copy member TSSU from the REXX library into a local SYSEXEC or
SYSPROC dataset referenced in your logon procedure.  Change
referenced datasets inside that EXEC to reflect what you called
your output datasets in the above step.  The datasets named in
the two statements below need to be changed to reflect your local
values:

THEREXX  ="SYS3.TSS.SYSEXEC"
THEPANEL ="SYS3.TSS.PANEL"

Step 3.

Determine your SMF SYSID and your JES node name. (Your MVS
systems programmer can provide you this data.) Copy member
T$$SAMP from the REXX library to a new member in the same dataset
named T$$xxxx, where xxxx is your SMF SYSID.  For example, if
your system SMF SYSID is MVS1, copy T$$SAMP to a member named
T$$MVS1.  The JES node will be used in the next step.


Step 4.

Edit the TSSINI and T$$xxxx Exec's in REXX library to reflect
local values.  Bold variables below must be changed to reflect
local values.  The other variables should work as delivered, but
you may opt to change them.  All variables are fully explained in
the next topic, The TSSINI and T$$xxxx Members.

TSSINI Variables:
Required changes -  DSBACK, DEF, AUTHCODE , PARMLIB
Optional changes - NEWPASS, SCALIST, SRCCMD, SRCSCR

T$$xxxx Variables:
Required changes - DS6, JESNODE, PARMLIB
Optional changes - DS1 DS2 DS3 DS4 DS5 ALUNIT and any TSSINI
                   values to be overridden.


The TSSINI and T$$xxxx Members

These two members are REXX execs that set up each user's
environment at panel initialization, and are re-executed when a
REINIT command is issued. Values set in TSSINI will be overlaid
by the T$$xxxx member settings if the same variable is specified
in both places. Since these members are so highly used, it is
important to create a backup prior to changing either member.

Changes to the TSSINI member should only be made for variables
that are defined when the product arrives.  User variables should
not be added to TSSINI.  Values specified in TSSINI are site
maintained and their usage is discussed below.

Editing TSSINI Member Variables

THIS_VERSION - The current panel system version.  Changing this
     value will cause a full REINIT (which reloads all user variables)
     to be performed (once for each user) the next time they use the
     system.
ALUNIT  - The unit type when allocating datasets.
AUTHNUM - The default authorization number for a user who has no
     match in the authorization parmlib member.
DEF - The defaults file, a partitioned dataset used for the
     addition function.  This file is where standard department
     authorities reside.  This filename should not have quotes
     included.  For a detailed description of the contents of this
     dataset, see the Add Function in the "Customization Procedures"
     chapter of this guide.
DSBACK -  A PDS used for the backup function.  This file should
     include single quotes.  This file is a basic PDS name only, and
     must not be a fully qualified dataset with a member name.
PARMLIB -  A PDS used for parameter files.  This file should not
     include single quotes.  This file is a basic PDS name only, and
     must not be a fully qualified dataset with a member name.
SCALIST - A valid flatfile or PDS member with a list of
     administrator IDs that will use the panel system and their
     authority levels.
SRCCMD - A valid flatfile or PDS member that contains the
     supplied command definitions.
SRCSCR  - A valid flatfile or PDS member that contains your
     screen definition.
TRAPNUM - The number of lines of debug data to retain.
USERCMD - A valid flatfile or PDS member that contains your
     custom command definitions that will override the delivered
     commands.

Editing T$$xxxx Member Variables

NEWPASS -  The text value to be substituted for user passwords
     during addition and conversion processing. This value will be
     included inside the parenthesis of the Replace password
     command.

CONVOPT - Indicates where the convert function is to store
     interim data.  The two options are DATASET or INTERNAL.  If
     DATASET is specified then any ID being converted is first
     listed to the DS1 dataset.  If INTERNAL is specified a dataset
     list is not created.

DS1 - A sequential file of  LRECL 80 for work dataset 1.
DS2 - A sequential file of  LRECL 80 for output dataset 2.
DS3 - A sequential file of  LRECL 80 for output dataset 3.
DS4 - A sequential file of  LRECL 133 for wide report output.
DS5 - A sequential file of  LRECL 80 for output dataset 5.
DS6 - This is sequential file or a PDS member that contains a JCL
     stream that supports a batch ISPSTART command.  A sample of this
     type of JCL stream is included in member JCSOURCE of the
     delivered parmlib.  You must change the datasets in the DS6
     dataset to reflect valid datasets for your installation. This JCL
     must include the delivered REXX library in the //SYSPROC DDNAME
     concatenation.  The last line in the deck must be:

//SYSTSIN  DD DATA,DLM=@@

This line of code allows instream data to be appended to the JCL
stream by subsequent commands.  After you have customized and
used the panel system at least once, copy your ISPF profile
dataset to another profile dataset for use by this job.  The
//ISPPROF DDNAME should reference this dataset.  This allows any
commands issued in the job to have access to local variable
settings.  You should recopy your ISPF profile to this dataset
each time you make variable changes that would affect the batch
environment, or whenever a new version of the SPI  software is
installed.

DSBACK - Same as the TSSINI value, but can be overridden here.

FLATMODL - A sequential file to use as a model dataset for work
DSN allocation.  This model dataset should be allocated with the
attributes you want used when the panel system dynamically
creates new datasets for work files.

JESNODE - The JES (Job Entry Subsystem) node name.

MSCA - The Top Secret MSCA ACID, used for converting SCA and LSCA
     IDs.

PARMLIB -  A PDS used for parameter files.  This file should not
include single quotes.  This file is a basic PDS name only, and
must not be a fully qualified dataset with a member name.

SRCCMD - Same as the TSSINI value, but can be overridden here.

SRCSCR  - Same as the TSSINI value, but can be overridden here.

VARLIST - A blank deliniated list of valid profile user variables
that will be honored when the panel system passes variables to
user commands defined in the command list member. Keep in mind
this variable cannot be more than 255 characters long.

Installation Complete

At this point the basic product installation is complete.
Continue with the Customization Procedures given in the next
chapter.



Chapter  2

Customization Procedures

This chapter explains how you can customize the supplied
environment to your site's specifications.  The topics include:

* Customization Guidelines.
* Using the Delivered Functions - such as ADD, BATCH, and WRITEDEBUG
* Securing Commands and Defining User Authority Levels

Customization Guidelines

The variables used in the system are set in one of two REXX
Execs: TSSINI or T$$xxxx (where xxxx represents the SYSID of the
current system).  Variables set in TSSINI are overwritten by
values specified in the T$$xxxx member.  Changes to TSSINI are
made for variables that are set globally, while the T$$xxxx
member holds individual system customization.

New variables should not be added to TSSINI; they should only be
added to TS$$xxxx.  New variable additions made to the T$$xxxx
member must be comprised of two things: a variable set statement
and a VPUT line that references the variable named in the set
statement.  An example is given below:

JESNODE  = "IMSJESC"
ADDRESS ISPEXEC "VPUT JESNODE  PROFILE"

The delivered functions have these statements in one or both of
the above Execs for each required variable.  Therefore, most of
the delivered functions require nothing more than variable
changes to the T$$xxxx member.

Customizing and using the Delivered Functions

Specific customization requirements are indicated below for each
delivered function:

* Add
* Authrun
* Backup
* Batch
* Convert
* Delete
* Getbackup
* WriteDebug

ADD Function

The ADD function uses the DEF variable (which should be a PDS
dataset with members formatted as mentioned below) to retrieve
the default authorities for each ID that is added.  During ID
addition the department specified for the ID is used as a member
name for retrieval from the defaults dataset.  The administrator
may override the default specification so that any valid member
is used.  Below is an example of a default authority member
(member DEFSAMP1 in the parmlib).

DEPT( $DEPT$ ) TYPE(USER)
 TSS PER( $$ ) DSN($$.DSN) ACCESS(ALL)
 TSS add( $$ ) home('/u/users/$$')
 TSS PER( $$ ) TSOACCT(98000)
 TSS PER( $$ ) TSOPROC(STEPLIB)
 TSS PER( $$ ) TSOPROC(SPFLOGON)
 TSS ADD( $$ ) PROF(MVSTECH)
 TSS ADD( $$ ) PROF(CONSPROF)
 TSS ADD( $$ ) PROF(CICSPRF)

Line one of the member is appended to the TSS CREATE command,
which is generated by the ADD command.  The panel system CREATE
command is comprised of these two lines:

TSS CREATE(xxxxxx)  PASSWORD(xxxxxx ,##)      +
NAME(' the name          ')

The first line of the defaults member is appended to this TSS
CREATE command listed above.

Each of the remaining lines are incorporated into the CREATE
stream after variable resolution.  Currently, the only two
variables that are scanned for include:

* $DEPT$ - The department specified on the addition panel.
* $$           - The ACID being added.

Notes:  Any valid TSO command can be issued in this stream.
Since the %ADDLOCAL  REXX EXEC is called each time an ID is added
by the system, this exec is a good place to include an alias
definition, or any other function that needs to be performed
external to the security package for a new ID.  A null function
ADDLOCAL EXEC is included in the default library.

Since some administrators do not have departments in their ID
creation, you may wish to create a DCA/VCA/LSCA member in the
defaults dataset.

AUTHRUN Function

This function uses the DEF variable to retrieve a valid default
authority member, as does the ADD function. This function can
also be called as a native REXX exec as part of an authority
stream in effect chaining authority streams together. The format
for invoking the AUTHRUN exec is as follows:

%AUTHRUN  the.defaults.dataset.stream(member)     $$

Note that the $$ would be replaced by the ID being added if this
was part of an authority stream.

BACKUP Function

This function requires you to specify the variable DSBACK and
point to a valid PDS.  There are no other overrides applicable to
this function.

BATCH Function

Like all functions that produce JCL as output, the BATCH function
requires you to specify the variable DS6 and point to a valid JCL
deck that supports a batch ISPSTART command.  Specific
requirements for this JCL deck can be found in the DS6 variable
description in the topic Editing T$$xxxx Member Variables in the
"Installation Procedures" chapter.

CONVERT Function

Like all functions that produce JCL as output this function
requires you to specify the variable DS6 and point to a valid JCL
deck that supports a batch ISPSTART command.  See the DS6
variable description in the topic Editing T$$xxxx Member
Variables in the "Installation Procedures" chapter for specific
requirements of this JCL deck.

DELETE Function

This function requires the variable DSBACK be specified and point
to a valid PDS.

GETBACKUP Function

This function requires the variable DSBACK be specified and point
to a valid PDS.  There are no other overrides applicable to this
function.

The WRITEDEBUG Function

This function requires the TRAPNUM variable to be a valid whole
number, to indicate how many lines of debug information to keep
available for reference.

Defining User Authority Levels and Securing Commands

The system uses an authority range of 1 - 10, with 1 being the
lowest and 10 being the highest or most authorized level.  An  ID
can issue a command if it has an authority level equal to or
higher than the level required by a command.

Each command definition has a minimum authority level defined in
the command definition member.  Any ID must have at least this
authority level to invoke that command.

ID authorities are defined in member ALLIDS in the delivered
parmlib, and referenced by the variable SCALIST.  The SCALIST
value is set in the TSSINI exec.  As delivered, all user IDs have
authority level 10-the highest level of authority.  To change a
user's level, update the ALLIDS member, as discussed in the
following topic.

Commands are defined in member CORECMD in the delivered parmlib,
and referenced by the variable SRCCMD.  The SRCCMD value is set
in the TSSINI exec.

To include a new command in the system, do the following:

1. Determine what security level will be required to issue the
   command.

2. Create the command description entry and include it in the
   CORECMD member, or whatever member you are currently using.  Be
   sure the security setting is what you determined in the previous
   step.

3. Make the command accessible to the system.  If it is a CLIST
   or REXX EXEC, move it into an ISPF library.  If it is a load
   module, make sure it is in the linklist or steplib concatenation
   of your session.

You may wish to create your own separate command member that will
override the delivered command member. The variable USERCMD in
TSSINI points to your own command member.

User ID Authority Definition Member (ALLIDS in PARMLIB)

This member defines user IDs and the non-default authorities you
wish them to have from the panel system.  Default authorities are
set by the AUTHNUM variable in TSSINI.  Each user ID that is to
have an authority that differs from the default authority should
have an entry in this ALLIDS member.

Word-Dependent Parameters

The ALLIDS member includes word-dependent parameters.  There are
no column dependencies.  The first word is checked for a match
against the user ID that is using the system.  If there is a
match on the first word starting in position 1, the user ID's
authority is set to the numeric value in word 2, and checking
continues for the entire file. Words 3 and greater are never
checked.

Which Authority is Used with Multiple Matches?

Masking is done automatically; that is, an A in the ALLIDS member
file will match any user ID starting with A.  Thus, there can be
multiple entries in the ALLIDS member which match a given user
ID. Which match determines the user ID's authority?  In all
cases, the final match of a user ID determines the authority.

For example, suppose the ALLIDS authority member includes the
following entries:

IBMUSER      10 DEFAULT
MYID         10 MY USER ID
YOURID       10 YOUR ID
M             1 All M IDs
MYID1         9 My favorite  ID

In this case, the user ID MYID would have an authority of 1,
since the last match found was one line 4.  The user ID MYID1
would have an authority of 9 since the last match found would be
on line 5.  ALLIDS should be organized with the least specific
entries on the top of the file and the more specific entries at
the bottom of the file.

The Command Definition Member (CORECMD in PARMLIB)

Commands are defined in member CORECMD in the delivered parmlib,
and referenced by the variable SRCCMD.  The value of SRCCMD is
set in the TSSINI Exec.

The command definition member is read each time that a user
invokes the panel system.  The delivered command member will
function without any modifications.  Optional changes can be made
if you need to add commands or change the default security
requirements of delivered commands.

Note: It is always a good idea to make a backup copy of this
member prior to making changes. If you are not running in expert
display mode you probably do not want to modify any values except
the authnum value for preexisting commands. Any changes to the
command definition member other than authority changes will not
be reflected in the basic panel environment.

Below is a section of the PARMLIB member CORECMD, which defines
the CONVERT command to the panel system.  The first line is
merely a comment, while the second line actually defines the
CONVERT command to the panel system.  This member is read in word
by word--that is, it is column independent.

Word 1: Panel Command Parameter (PNLCMD)

Word 1 on each line is the panel command parameter (indicated by
the PNLCMD header in the comment).  This must be an exact match
with the command entered by the user on the panel.  For example,
the line below will receive control when CONVERT is entered on
the panel system command line.

* PNLCMD CMDNAME    MSG    DATA DATA2 AUTH TRAP BATCH  VARS
 CONVERT   TVER.CON  1     0      0    5   ON    2     ACID

Word 2: Internal Command Parameter (CMDNAME)

Word 2 on each line is the internal command parameter (indicated
by the CMDNAME header in the comment). This is the command that
will be issued by the system itself internally to accomplish the
work that the user requested. This must be a REXX exec, CLIST, or
load module available to this TSO user.  A special keyword is
allowed for this parameter only, it is the TVER prefix.  This
will be replaced with the three-character code, which indicates
the security package and version level.  For example if you are
using *Top Secret* version 5.0 the prefix will be T50, so the
actual REXX exec name that will invoked here is T50CON.  The TVER
variable is set in the TSSVERS REXX EXEC.  No other variable will
be interpreted in CMDNAME parameter!

* PNLCMD CMDNAME    MSG    DATA DATA2 AUTH TRAP BATCH  VARS
 CONVERT   TVER.CON  1      0     0    5    ON   2     ACID

Word 3: Message Parameter (MSG)

Word 3 on each line is the message parameter (indicated by the
MSG header in the comment). This determines whether at the
conclusion of this command the panel system should retrieve the
variable SECRC (via an ISPEXEC VGET  PROFILE  service) and
display it on the command line as the result of the command.  The
valid values here are 0 or 1.  If a zero is specified the return
code is displayed at the conclusion of the command.  A 1 causes
the returned message to be displayed.

* PNLCMD CMDNAME    MSG    DATA DATA2 AUTH TRAP BATCH  VARS
 CONVERT   TVER.CON  1      0     0    5    ON   2     ACID

Word 4: Data Parameter (DATA)

Word 4 on each line is the data parameter (indicated by the DATA
header in the comment). This determines whether the data field on
the panel must be filled in prior to invocation of this command,
and, if so, what must be present in the field. The valid values
here are 0, 1, NUM, CHAR, OPTC, or OPTN, as defined in the
following table.

Data Parameter Values for Panel Fields

Value       Definition

0           Value is not required.
1           Value must be filled in.
NUM         Value must be numeric.
CHAR        Value must be filled with a character value.
OPTN        Optional value; if specified, must be numeric.
OPTC        Optional value; if specified, it must be a character.

* PNLCMD CMDNAME    MSG    DATA DATA2 AUTH TRAP BATCH  VARS
 CONVERT   TVER.CON  1      0     0    5    ON   2     ACID

Word 5: Second Data Parameter (DATA2)

Word 5 is exactly the same as word 4 except it refers to the
DATA2 screen value.

Word 6: Authority Parameter (AUTH)

Word 6 on each line is the authority parameter (indicated by the
AUTH header in the comment). The convert command specifies a 5 as
its authority level.

* PNLCMD CMDNAME    MSG    DATA DATA2 AUTH TRAP BATCH  VARS
 CONVERT   TVER.CON  1      0     0    5    ON   2     ACID

Word 7: Out-trap Parameter (TRAP)

Word 7 on each line is the out-trap parameter (indicated by the
TRAP header in the comment). The possible values of this
parameter are ON and OFF and LOG. When ON is specified all output
from this exec is suppressed via the REXX out-trap facility. When
off is specified any messages written are shown to the user
immediately. The LOG option in addition to trapping output of the
function writes a one-line record to the SPI  log dataset
(specified in the LOGDSN variable in TSSINI). Most functions
should specify ON or LOG and write debug only messages to the
screen. Suppressed messages can be viewed with the WRITEDEBUG
function.

* PNLCMD CMDNAME    MSG    DATA DATA2 AUTH TRAP BATCH  VARS
 CONVERT   TVER.CON  1      0     0    5    ON   2     ACID
.

Word 8: Batch Environment Setting (BATCH)

Word 8 on each line is the batch environment setting ( indicated
by the BATCH header in the comment  ). The possible values for
this parameter are 0, 1 or 2 .

0  -  A value of 0 indicates that this command will not be issued
      in batch mode, but that a record will be written to the
      accrued JCL stream instead. This value is normally specified
      for a command that updates the security database directly.

1  -  A value of 1 indicates that the command is to be issued in
      batch mode and supports a pre-opened batch file. This would
      normally be specified for a command that writes multiple
      updates to the batch file. This setting is used rarely and
      usually indicates a command that is doing a large amount of
      decision making.

2  -  A value of 2 indicates that the command is to be issued
      immediately without respect to the mode with no pre-opened
      batch file. Any command using this setting should be a short
      running command that performs no security updates.

* PNLCMD CMDNAME    MSG    DATA DATA2 AUTH TRAP BATCH  VARS
 CONVERT   TVER.CON  1      0     0    5    ON   2     ACID


Arguments Following Word 8

Words following word 8 are a list of arguments to pass to the
invoked routine on the command line. There are several control
characters that can be included to control how the argument
string is created.  These control characters and their function
are given below:

_    An underscore indicates that any value that follows is a
     literal and should not be substituted.

<    The less-than sign indicates that any preceding spaces
     should be deleted.

Example 1:      If  these variables are set:
DSBACK = SYS1.BACKUP
ACID   = MYID
DS1    = 'TECH.MYID.C1'
DATA   =  ABC
DATA2  =  DEF
then the variable string below:
TRAP BATCH  VARS
ON          2         DSBACK  <_( <ACID <__)   DS1   __SHR
would be passed as this argument:
SYS1.BACKUP(MYID)  'TECH.MYID.C1'  SHR

Example 2:      If  the same variables are set:
DSBACK = SYS1.BACKUP
ACID   = MYID
DS1    = 'TECH.MYID.C1'
DATA   =  ABC
DATA2  =  DEF
then the string below:
__PER( <ACID __) __DSN(SYS1.STUF. <DATA <__. <DATA2 __) __ACCESS(ALL)
would be passed as this argument:
per(MYID  )  DSN(SYS1.STUF.ABC.DEF) ACCESS(ALL)


Screen Definition Member (CORESCR in PARMLIB)

The screen appearance can be customized to include commands that
you add to the panel system. Unlike the CORECMD member, the
screen definition member is column dependent!

Note: This member is only referred to in expert mode, if you are
not runing in expert mode do not change this data.

There are three visible columns on the main panel that are
defined in the first three fields, starting in columns 1, 23 and
41, and an authority indicator in columns 79-80.  The first three
columns are shown to the user exactly as they appear in the
screen definition member only if the authorization level of the
user is equal to or above the authorization level for that line
in the screen definition.   This allows you to customize the
member so that each level of authority only sees the commands
that they are authorized to execute.

Be aware that the security authority of the command in the
command definition member and the authority level defined in the
screen definition member must match, or the user will either see
options they cannot use or will not see options they are
authorized to use.




A
ADD Function
        customization guidelines        12
Argument string control characters      22
Authority parameter (AUTH)
        customization guidelines        20

B
Batch environment setting (BATCH)
        customization guidelines        21

C
Command definition member (CORECMD)
        customization guidelines        17
Customization guidelines                11

D
Data parameter (DATA)
        customization guidelines        19
Data parameter
        values                          19

H
Hardware requirements (none)             1

I
Installation steps                       1
Internal command parameter (CMDNAME)
        customization guidelines        18

M
Message parameter (MSG)
        customization guidelines        19

O
Out-trap parameter (TRAP)
        customization guidelines        20

P
Panel command parameter (PNLCMD)
        customization guidelines        17

S
Screen definition member (CORESCR)
        customization guidelines        23
Second data parameter (DATA2)
        customization guidelines        19
Software requirements                    1
SPI
        customization                   11
        installation steps               1
        requirements, system             1

T
T$$SAMP
        copy to new member T$$xxxx       5
T$$xxxx
        editing variables                5, 7
        variable definitions             9
TSSINI
        editing variables                5, 7
        variable definitions             7
TSSU, copy to local SYSEXEC or SYSPROC   5


Defining User Authority Levels and Securing Commands

Defining User Authority Levels and Securing Commands

2-26    SPI  Installation and Customization Guide

        Customization Procedures    2-25



        Customization Procedures    2-1

