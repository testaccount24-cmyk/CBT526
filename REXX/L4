/* REXX (Restructured eXtended eXecutor language) */
/*************************************************************/
/** this exec was stolen from Blair Meglathery at IMS america*/
/*************************************************************/
ADDRESS ispexec
Do Forever
  "DISPLAY PANEL (LFMP001)"
  If rc > 4 Then  /* END command, exit */
     Leave
  ADDRESS tso "NEWSTACK"  /* create a new stack */
  Select
    When l4fddn = "LLT" Then
      Call WalkLLT   /* get link list dsn's */
    When l4fddn = "LPAT" Then
       Call WalkLPAT  /* get LPA list dsn's */
    When LENGTH(l4fddn) = 6 & SUBSTR(l4fddn,1,4) = "PROC" &  ,
      (SUBSTR(l4fddn,5,2) >= "00" & SUBSTR(l4fddn,5,2) <= "99") Then
      Call WalkJES2  /* get PROCxx dsn's */
    When l4fddn = "STEPLIB" Then Do
      Call Find_Steplib   /* Find ddname allocated by STEPLIB */
      If result /= "" Then
        l4fddn = result
      Call WalkTIOT  /* get ddname dsn's */
    End
    Otherwise
      Call WalkTIOT  /* get ddname dsn's */
  End
   If result <= 0 Then
      "SETMSG MSG(LFMM000)"
   Else Do
      Call Search /* search libs for member */
      If result > 0 Then  /* if member found */
         Call Display     /* display table */
      Else
         "SETMSG MSG(LFMM002)"
   End  /* if */
      ADDRESS tso "DELSTACK"  /* delete stack */
   End  /* do forever */
   "CONTROL ERRORS RETURN"   /* trap error */
   "TBCLOSE L4FTABL"
Exit 0
/*---------------------------------------------------*/
/*  Create a stack for LPAT entries (LPA list)       */
/*---------------------------------------------------*/
WalkLPAT:
   @cvt = STORAGE(10,4)    /* CVT address */
   @lpa = STORAGE(D2X(C2D(@cvt)+1196),4)    /* storage map extension */
   @lpa = STORAGE(D2X(C2D(@lpa)+56),4)    /* LPAT address */
   If STORAGE(D2X(C2D(@lpa)),4)  /= "LPAT" Then Do
      Say "Can't locate LPAT"   /* not a valid LPAT */
      Return -1
   End
   nrdsns = C2D(STORAGE(D2X(C2D(@lpa)+4),4))  /*number of lpat entries*/
   lpadsn = " "
   @lpa = D2C(C2D(@lpa)+8)  /* address of 1st lpa entry */
   Do i=nrdsns to 1 by -1  /* loop thru lpa */
      lpadsn =  STORAGE(D2X(C2D(@lpa)+1),44)
      QUEUE lpadsn   /* add dsn to stack */
      @lpa = D2C(C2D(@lpa)+45)  /* point to next lpa entry */
   End
Return nrdsns
/*---------------------------------------------------*/
/*  Create a stack for LLT entries (link list)       */
/*---------------------------------------------------*/
WalkLLT:
   @cvt = STORAGE(10,4)    /* CVT address */
   @llt = STORAGE(D2X(C2D(@cvt)+1244),4)    /* LLT address */
   If STORAGE(D2X(C2D(@llt)),4)  /= "LLT " Then Do
      Say "Can't locate LLT"   /* not a valid LLT */
      Return -1
   End
   nrdsns = C2D(STORAGE(D2X(C2D(@llt)+4),4))  /* number of LLT entries*/
   lltdsn = " "
   @llt = D2C(C2D(@llt)+8)  /* address of 1st LLT entry */
   Do i=nrdsns to 1 by -1  /* loop thru LLT */
      lltdsn =  STORAGE(D2X(C2D(@llt)+1),44)  /* dsname */
      QUEUE lltdsn   /* add dsn to stack */
      @llt = D2C(C2D(@llt)+45)  /* point to next LLT entry */
   End
Return nrdsns
/*---------------------------------------------------*/
/*  Create a stack for PROCxx DD entries             */
/*---------------------------------------------------*/
WalkJES2:
   If jes2proc /= "R" Then Do
      /* Read SYS1.PROCLIB(JES2) into variables */
      jes2proc = "R"
      line.0 = 0
ADDRESS tso
      /* allocate file */
      "ALLOC F(TEMP) DA('SYS1.PROCLIB(JES2)') SHR REUSE"
      "EXECIO * DISKR TEMP ( FINIS STEM line."
      "FREE F(TEMP)"
ADDRESS ispexec
   End
   If line.0 <= 0 Then  /* JES2 proc not read */
      Return 0

   nrdsns = 0
   /* Search for beginning of requested DDname concatenation */
   Do i = 1 to line.0 by 1 until SUBSTR(line.i,3,6) = l4fddn
   End
   If i > line.0 Then /* PROCxx not found */
      return 0
   Call Finddsn   /* extract dsname */

   /* Process the rest of the DD's in the concatenation      */
   Do i = i + 1 to line.0 by 1 While  SUBSTR(line.i,3,1) = " "
      Call Finddsn /* process next statement in concatenation */
   End
Return nrdsns

/* Finddsn - WalkJES2 sub-routine to        */
/* extract the DSNAME from the DD statement */
Finddsn:
   PARSE VAR line.i "DSN=" dsname "," trail
   If dsname > " " Then Do
      If SUBSTR(dsname,1,1) /= "&"  Then Do
         QUEUE dsname   /* add dsn to stack */
         nrdsns = nrdsns + 1
      End
      Else Do
         /* Go back and do the symbolic substitution */
         compare = STRIP(dsname,l,"&")||"="
         Do a =  1 to line.0 by 1 While INDEX(line.a," EXEC ") = 0
            PARSE VAR line.a (compare) dsname "," trail
            If dsname > " " Then Do
               If SUBSTR(dsname,1,1) = "'" Then
                  dsname = STRIP(dsname,B,"'")
               QUEUE dsname   /* add dsn to stack */
               nrdsns = nrdsns + 1
            End
         End
      End
   End
Return 0
/*---------------------------------------------------*/
/*  Create a stack for DD entries                    */
/*---------------------------------------------------*/
WalkTIOT:
   nrdsns = 0
   @tcb = STORAGE(21C,4)        /* get TCB address from psaaold */
   @tiot = STORAGE(D2X(C2D(@tcb)+12),4)
                                 /*add 12 to get first TIOT address */
   @1stdd = D2X(C2D(@tiot)+28) /* point to 1st DD in TIOT */
   @1stddlen = STORAGE(D2X(C2D(@tiot)+24),1) /* get its length */
   @tiot = D2X(C2D(@tiot)+24) /* point2 1st TIOT DDNAME         */
   Do While C2D(@1stddlen) /= 0  /* loop  thru entire TIOT*/
      tiotddname = STORAGE(@1stdd,8)                    /* pick up ddnam e */
      If nrdsns = 0  Then Do
         If tiotddname = l4fddn Then Do
            nrdsns = nrdsns+1
            @token = STORAGE(D2X(X2D(@tiot)+12),3)
                  /* get JFCB 24-bit token from TIOT */
            @jfcb = @SWAREQ(@token)   /* get JFCB address from SWAREQ1*/
            QUEUE STORAGE(C2X(@jfcb),44)  /* add dsn to stack */
         End
      End
      Else Do
         If tiotddname /= " " Then
            Leave
         Else Do
            nrdsns = nrdsns+1
            @token = STORAGE(D2X(X2D(@tiot)+12),3)
                 /* get JFCB 24- bit token from TIOT */
            @jfcb = @SWAREQ(@token)
                /* get JFCB address from SWAREQ1   */
            QUEUE STORAGE(C2X(@jfcb),44)  /* add dsn to stack */
         End
      End
      @tiot = D2X(X2D(@tiot)+C2D(@1stddlen))
       /* point to next  TIOT entry        */
      @1stddlen = STORAGE(@tiot,1)
      /* get length of  TIOT entry        */
      @1stdd  = D2X(X2D(@tiot)+4)
      /* point at DDNAME in TIOT         */
   End
Return nrdsns
/*---------------------------------------------------*/
/*  Search libs for the member                       */
/*---------------------------------------------------*/
Search:
   found = 0
   l4fsel = " "
   l4fnbr = 0
   "TBCREATE L4FTABL NAMES(L4FSEL L4FNBR L4FDSN) NOWRITE REPLACE"
   Do While QUEUED() > 0
      pull l4fdsn
      l4fdsn = STRIP(l4fdsn,T)
      l4fnbr = l4fnbr+1
      "CONTROL DISPLAY LOCK"
      "DISPLAY PANEL (LFMP001) MSG(LFMM001)"
      If INDEX(l4fmem,"*") /= 0 | INDEX(l4fmem,"%") /= 0 Then Do
         "CONTROL DISPLAY SAVE"
         "CONTROL ERRORS RETURN"  /* trap errors */
         "CONTROL NONDISPL END"   /* don't show member list */
         "BROWSE DATASET('"l4fdsn"("l4fmem")')"
         rc2 = rc    /* save return code */
         "CONTROL DISPLAY RESTORE"
         "CONTROL ERRORS CANCEL"  /* cancel trap */
         If rc2 = 0 Then Do
            /*---------------------------------*/
            /* Member found, add DSN to table  */
            /*---------------------------------*/
            "VPUT (L4FSEL L4FNBR L4FDSN) ASIS"
            "TBADD L4FTABL SAVE(L4FSEL L4FNBR L4FDSN)"
            found = found+1
         End
      End
      Else Do
         If SYSDSN("'"l4fdsn"("l4fmem")'") = "OK" Then Do
            /*---------------------------------*/
            /* Member found, add DSN to table  */
            /*---------------------------------*/
            "VPUT (L4FSEL L4FNBR L4FDSN) ASIS"
            "TBADD L4FTABL SAVE(L4FSEL L4FNBR L4FDSN)"
            found = found+1
         End
      End
   End  /* do while */
Return found
/*---------------------------------------------------*/
/*  Display results of successful search             */
/*---------------------------------------------------*/
Display:
   ztdtop = 0
   l4fcrp = 0
   Do Forever
      "TBTOP L4FTABL"
      "TBSKIP  L4FTABL NUMBER("ztdtop")"
      "TBDISPL L4FTABL PANEL(LFMP002) AUTOSEL(NO),
         POSITION(L4FCRP) CSRROW("l4fcrp")"
      If rc > 4 Then Leave  /* END command, exit */
      Call Process  /* process line select command */
      Do while ztdsels > 1
         "TBDISPL L4FTABL AUTOSEL(NO),
            POSITION(L4FCRP) CSRROW("l4fcrp")"
         Call Process  /* process line select command */
      End
   End
Return 0
/*---------------------------------------------------*/
/*  Process line select commands                     */
/*---------------------------------------------------*/
Process:
   If usel > " " Then Do
      "CONTROL DISPLAY SAVE"
      usel   /* do what the line select says to */
      l4fsel = " "
      "CONTROL DISPLAY RESTORE"
   End
Return 0
/*---------------------------------------------------*/
/*  Find ddname allocated by STEPLIB TSO command     */
/*---------------------------------------------------*/
Find_Steplib:
   stepddn = ""  /* assume ddname not found */
   tcb = STORAGE(21C,4)
   tiot = STORAGE(D2X(C2D(tcb)+12),4)
   tcbjstcb = STORAGE(D2X(C2D(tcb)+124),4)
   tcbgrs10 = STORAGE(D2X(C2D(tcbjstcb)+88),4)
   tcbgrs11 = STORAGE(D2X(C2D(tcbjstcb)+92),4)
   If tcbjstcb = tcbgrs10 Then Do
  /*  tcbgrs10 = STORAGE(D2X(C2D(tcbjstcb)+92),4) */
      /* ------------------------------------------------ */
      /* NOTE: the following displacement into the        */
      /*       STEPLIB/RITMP working storage for the DCB  */
      /*       may change if STEPLIB is re-assembled or   */
      /*       additional items are added to working      */
      /*       storage.                           07Dec95 */
      /* ------------------------------------------------ */
/*    pdsdcb = D2C(C2D(tcbgrs10)+224,4)  */
      pdsdcb = D2C(C2D(tcbgrs11)+224,4)
      /* ------------------------------------------------ */
      dcboflgs = STORAGE(D2X(C2D(pdsdcb)+48),1)
      dcbtiot = STORAGE(D2X(C2D(pdsdcb)+40),2)
      If BITAND(dcboflgs,'10'x) = '10'x Then
         stepddn = STORAGE(D2X(C2D(tiot)+C2D(dcbtiot)+4),8)
   End
Return stepddn
 /**********************************************************************  */
 /* TITLE - Look for member                                               */
 /* STATUS - V1R0M0                                                       */
 /*                                                                       */
 /* FUNCTION - Search DD concatention for existence of specified          */
 /*            member.                                                    */
 /* ENVIRONMENT - MVS/SP4.2.0, TSO/E 2.4, ISPF/PDF 3.5.0                  */
 /* Dependencies - @SWAREQ (a user-written REXX function to issue the     */
 /*                SWAREQ macro to convert a 3-byte token to a 31-bit     */
 /*                address)                                               */
 /* Acknowledgements: My thanks to Dave Russell for suggesting and        */
 /*                   demonstrating the use of some of the REXX           */
 /*                   functions that I needed for this exec and with      */
 /*                   which I had been heretofore unfamilar.              */
 /* AUTHOR - Blair N. Meglathery                                          */
 /*          Technical Development Department                             */
 /*          IMS America Ltd.                                             */
 /*          Plymouth Meeting Executive Campus                            */
 /**********************************************************************  */
 /*          660 W. Germantown Pike                                       */
 /*          P.O. BOX 905                                                 */
 /*          Plymouth Meeting, PA  19462-0905                             */
 /*          U.S.A.                                                       */
 /*          Phone: (215) 834-4734                                        */
 /*                       OR                                              */
 /*                 (215) 834-5000                                        */
 /*          SHARE Installation Code: IAT                                 */
 /* DATE WRITTEN -  August 1995                                           */
 /* CHANGE ACTIVITY :                                                     */
 /*   WHEN       WHO                 WHY                                  */
 /* --------  ----------    --------------------------------------------  */
 /*  04Aug95  Meglathery    Original version                              */
 /*  10Nov95  Meglathery    Marine Corps 220th birthday. Added JES2       */
 /*                         PROCxx processing.                            */
 /*  07Dec95  Meglathery    Added STEPLIB command processing              */
 /*  28Dec95  Meglathery    Added library concatenation number to table   */
 /**********************************************************************  */
