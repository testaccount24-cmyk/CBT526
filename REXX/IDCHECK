/** rexx                                                 **/
/**********************************************************/
/** NOW CHECKS TSS TSO AREA FOR COMPLETENESS.            **/
/**********************************************************/
/** RUNS A VARIETY OF CHECKS ON A standard acid          **/
/**********************************************************/
/** EXEC NAME        : IDCHECK                           **/
/** LAST MODIFIED    : 26 may 99                         **/
/**----------------INPUT REQUIRED -----------------------**/
/** PASSED ARGS        VALID VALUES                      **/
/** ID      :  THE USERID TO CHECK                       **/
/**                                                      **/
/**----------------OUTPUT PRODUCED-----------------------**/
/** VALID CONDITION CODES - 00                           **/
/** A PLAIN TEXT RESULTS STREAM.                         **/
/**                                                      **/
/**----------------REQUIREMENTS--------------------------**/
/** CAN RUN STANDALONE : YES                             **/
/** ISPF ENVIRONMENT   : YES                             **/
/** EXECS CALLED WITHIN THIS EXEC : getdata DSGLIST      **/
/**                                 ACCTCHK              **/
/**********************************************************/
ARG ID
SIGNAL OFF ERROR
LASTON = 0
TODAY = DATE(J)
QWA   = MSG("OFF")
profile=sysdsn("'"id".ispf.ispprof'")
DEFAULT_ACCT = "NONTSS"
LAST_USED = "$NOTFOUND"
ACCT_VALID = "UNKNOWN"
T2 = SUBSTR(TODAY,1,2)
DTYPE = DATATYPE(T2)
address ispexec "vget dsback profile"
/* SAY "IDCHECK: T2 DATATYPE IS " DTYPE T2*/
T2 = T2 * 365
T4 = SUBSTR(TODAY,3)
TODAY = T2 + T4
MMDDYY= DATE(U)
MONTH = SUBSTR(MMDDYY,1,2)
DAY = SUBSTR(MMDDYY,4,2)
YEAR = SUBSTR(MMDDYY,7,2)
ID2 = SUBSTR(ID,1,2)
EXPIRES = "INDEFINITE"
SS = OUTTRAP(idlist.)
address tso "tss list("id") data(all)"
list_rc = rc
SS = OUTTRAP(LINE.)
/**********************************************************/
/** CHECK UADS                                           **/
/**********************************************************/
IF LENGTH(ID) > 7 THEN
  UADS     = "ID TOO LONG FOR TSO"
ELSE
  UADS = SYSDSN("'SYS1.UADS("ID"0)'")
/* X = OUTTRAP("OFF") */
call  getdata NAME
TSSNAME = SECRC
call  getdata TSO
TSSTSO = SECRC
IF TSSTSO = " " THEN TSSTSO = "YES"
  /**********************************************************/
  /** IF THE ID IS TOP SECRET DEFINED THEN WE GET SOME DATA**/
  /**********************************************************/
IF (TSSNAME ¬= "$BADTSS") & (TSSNAME ¬= "$BADAUTH")  THEN DO
  call getdata "ATTRIBUTES"
  ATTR = SECRC
  call getdata " USED"
  LAST_USED = SECRC
  IF TSSTSO = "YES" THEN DO /* TSO AREA EXISTS LETS CHECK IT */
    call getdata TSOLACCT
    DEFAULT_ACCT = SECRC
    ACCTNUM = SECRC
    call getdata TSOLPROC
    DEFAULT_PROC = SECRC
    /*****************************************************/
    /** NOTE: I CHECK FOR THE MOST SERIOUS STUFF LAST   **/
    /**       1ST  NO PROCEDURE SPECIFIED               **/
    /**       2ND  NO ACCOUNT NUMBER                    **/
    /*****************************************************/
    IF (DEFAULT_PROC = "$NOTFOUND") THEN DO
      TSO_INCOMP = "YES"
      TSO_REASON = "       ID HAS NO DEFAULT LOGON PROCEDURE    "
      TSO_FIX =    "       ISSUE THE DEFPROC COMMAND WITH VALID PARMS."
    END
    IF (DEFAULT_ACCT = "$NOTFOUND") THEN DO
      TSO_INCOMP = "YES"
      TSO_REASON = "       ID HAS NO DEFAULT TSO ACCOUNT NUMBER "
      TSO_FIX =    "       ISSUE THE DEFTSO COMMAND WITH VALID PARMS."
    END
    ACCT_VALID = "YES"
  END
  call  getdata  EXPIRES
  EXPIRES = SECRC
  IF EXPIRES ¬= "$NOTFOUND" THEN DO
   EMONTH = SUBSTR(EXPIRES        ,1,2)
   EDAY = SUBSTR(EXPIRES          ,4,2)
   EYEAR = SUBSTR(EXPIRES         ,7,2)
   IF EYEAR < YEAR THEN EXPIRED = "YES"
   IF (EYEAR = YEAR) & (EMONTH < MONTH) THEN EXPIRED = "YES"
   IF (EYEAR = YEAR) & (EMONTH = MONTH) & (EDAY <= DAY)   THEN
     EXPIRED = "YES"
  END
  IF EXPIRES =  "$NOTFOUND" THEN EXPIRES = "INDEFINITE"
END
ADDRESS TSO "LISTC ENT('"ID"')"
ALIAS_CHECK = RC
  /**********************************************************/
  /** INTERPRET ALL THESE RETURN CODES                     **/
  /**********************************************************/
say "Idcheck: running diagnostics on ID " ID
SAY "***************************************"
SAY "  "
IF (list_rc = 8) THEN DO
  SAY "************************************************************"
  say "**This ID is not defined to TOP SECRET. TRY AGAIN"
  SAY "************************************************************"
END
IF (TSSNAME = "$BADAUTH") THEN DO
  SAY "************************************************************"
  say "**This ID is not subject to your control under top secret"
  say "**this will prevent all your top secret commands from"
  say "**functioning with regard to this ID. Any changes that this"
  say "**ID requires must be done by a higher level of top secret"
  say "**administrator. Diagnostics will continue however TSS "
  say "**data retrieval from this ID will fail."
  SAY "************************************************************"
END
IF LENGTH(ID) ¬= 7 THEN DO
  SAY "************************************************************ "
  say "*This ID is not the standard length of 7. this may not be an "
  say "*  error, but it is not within standards.                    "
  SAY "************************************************************ "
  SAY "   "
END
IF BACKUP = "OK" THEN DO
  SAY "**************************************************************"
  say "* This ID has a restore member under the in house panel system"
  say "* this means that the ID was deleted or backed up using the  "
  say "* in house panel system and could be recreated to some degree."
  say "* this is not an error condition, but is quite unusual.       "
  say "*                                                             "
  say "* note: This may be the only deletion indicator, other checks  "
  say "*       may return results which indicate that this ID has    "
  say "*       never logged on or been used . this is normal.        "
  SAY "**************************************************************"
  SAY "  "
END
IF TSSTSO = "YES" THEN DO
  say " This IDs tss definition is front ending UADS."
  SAY "  "
END
IF TSO_INCOMP = "YES" THEN DO
  SAY "**************************************************************"
  say "* The ID has a partially defined top secret tso area, which   "
  say "* means UADS is not checked for logon data, yet the top secret"
  say "* area is inadequate for the following reasons:"
  say "* "tso_reason
  say "* suggested course of action:"
  say "* "tso_fix
  SAY "**************************************************************"
  SAY "  "
END
  /**********************************************************/
  /** NEXT WE LOOK AT THE ALIAS                            **/
  /**********************************************************/
IF ALIAS_CHECK ¬= 0 THEN DO
  SAY "************************************************************ "
  say "*This ID has no master catalog alias! this is a severe "
  say "*  condition which will result in allocation errors,   "
  say "*  and an inability to logon to use ISPF. No normal user "
  say "*  should be setup in this manner."
  ADDRESS TSO "%DSGLIST "ID
  IF RC = 0 THEN DO
    say "*  even worse the ID has pre-existing datasets which means "
    say "*  someone created them without an alias being present."
    say "*  to fix this error:"
    say "* 1. Uncatalog all "ID". datasets on the system."
    say "* 2 Define the alias with the imsalias command   "
    say "*    syntax is 'tso %imsalias  "ID"'"
    say "* 3. Recatalog dsns you uncataloged."
  END
SAY "********************************************************** "
END
SAY "   "
  /**********************************************************/
  /** NEXT WE LOOK AT THE ATTRIBUTES OF THE ID             **/
  /**********************************************************/
IF INDEX(ATTR,"SUSPEND") ¬= 0 THEN DO
  SAY "************************************************************ "
  say "* This ID is currently suspended and not available for use "
  say "* the 'unsus' command should fix this problem."
  SAY "************************************************************ "
  SAY " "
END
else say " No suspend attribute was detected."
SAY "   "
/**********************************************************/
/** LETS EVALUATE THE UADS DATASET RESULTS               **/
/**********************************************************/
SELECT
  WHEN UADS = "OK" THEN DO
    say " ISPF UADS results are normal "
    SAY " "
  END
  WHEN UADS = "UNAVAILABLE DATASET" THEN DO
    SAY "************************************************************"
    say "*       UADS check = " UADS
    say "* The ISPF UADS dataset is either allocated or "
    say "* otherwise unavailable. this is a very strange condition.  "
    say "* contact tech development. "
    say "************************************************************"
  END
  WHEN UADS = "ID TOO LONG FOR TSO" THEN DO
    say "  UADS dataset check was bypassed due to ID length "
    SAY " "
  END
  WHEN UADS = "DATASET NOT FOUND" THEN DO
    SAY "************************************************************"
    say "* The UADS dataset is not found this is probably an "
    say "* error with the diagnose software. contact "
    say "* tech development."
    say "************************************************************ "
    SAY " "
  END
  WHEN (UADS = "MEMBER NOT FOUND") & (TSSNAME = "$BADTSS") THEN DO
    SAY "************************************************************"
    say "* The ID has no UADS entry in sys1.UADS and is not defined  "
    say "* to top secret. This ID cannot possibly use tso.         "
    SAY "************************************************************ "
    SAY " "
  END
  WHEN UADS = "MEMBER NOT FOUND" THEN DO
    SAY "************************************************************"
    say "* The ID has no UADS entry in sys1.uads. This is OK as long "
    say "* as the TSO SEGMENT is present in the TSS ACID             "
    say "************************************************************"
    SAY " "
  END
  OTHERWISE
    SAY "************************************************************"
    say "*      UADS check results were " UADS
    say "* This is an unusual condition, i have no specific fix "
    say "* recommendation. contact tech development."
    say "************************************************************"
END /* UADS SELECT  */
/**********************************************************/
/** LETS EVALUATE THE TSOUSERS DATASET RESULTS           **/
/**********************************************************/
IF EXPIRED  = "YES" THEN DO
  say "* This ID appears to have expired on " expires
  say "* the ID can be fixed using the 'expire' command and "
  say "* providing a new expiration date. then issuing an   "
  say "* 'unsus' command.                                   "
  SAY " "
END
else say " The ID has an expiration time of" expires
SAY " "
/****************************************************/
/** START PROFILE CHECK                            **/
/****************************************************/
SELECT
  WHEN PROFILE = "OK" THEN
    say " ISPF profile results are normal "
  WHEN PROFILE = "UNAVAILABLE DATASET" THEN DO
    SAY "************************************************************"
    say "* The ISPF profile dataset is either allocated or "
    say "* otherwise unavailable. this could be a result of it being "
    say "* allocated by the ID if it is logged on, or another ID "
    say "* updateing the dataset."
    say "************************************************************"
  END
  WHEN (PROFILE = "DATASET NOT FOUND") & (NEVER_TSO ¬= "YES") THEN DO
    SAY "************************************************************"
    say "* The ISPF profile dataset is not found. "
    SAY "************************************************************"
  END
  WHEN (PROFILE = "DATASET NOT FOUND") & (NEVER_TSO = "YES") THEN DO
    say " The ISPF profile dataset is not found. this is normal    "
    say " since the ID has yet to be used in ISPF. "
    IF NONTSS = "YES" THEN
     say " If this is a dataview ID the 'dvnprof' command should be "
    IF NONTSS = "YES" THEN
     say " issued to create this dsn for the customer."
    SAY " "
  END
  OTHERWISE
    SAY "************************************************************"
    say "*      Profile check results were " profile
    say "* This is an unusual condition, I have no specific fix "
    say "* recommendation. Perhaps a delete and reallocate could work"
    SAY "************************************************************"
END /* PROFILE SELECT  */
SAY " "
IF LAST_USED ¬= "$NOTFOUND" THEN DO
  say " The last recorded system use of the ID was " last_used
  IF NEVER_TSO = "YES" THEN DO
    say " This ID is probably used for batch work or is remotely  "
    say " submitted into the system since it has never used tso."
    say " This is probably not an error condition.                   "
    say " This ID may actually function without an alias, though it  "
    say " is hard to tell. Problems with this ID should be reported  "
    say " to technical support.                                      "
    say " "
  END
END
SAY "              "
BIGGUY = SYSVAR(SYSUID)
IF BIGGUY ¬= "COA1DIR" THEN
exit 0
SAY "INDIVIDUAL RETURN CODES ARE BELOW"
SAY "ACCT_VALID  IS" ACCT_VALID
SAY "ALIAS CHECK IS" ALIAS_CHECK
SAY "ATTRIBUTES  IS" ATTR
SAY "BACKUP      IS" BACKUP
SAY "DEF ACCOUNT IS" DEFAULT_ACCT
SAY "DEPT VALID  IS" DEPT_VALID
SAY "EXPIRES     IS" EXPIRES
SAY "GHOSTADD    IS" GHOSTADD
SAY "LAST USED   IS" LAST_USED
SAY "LASTON      IS" LASTON
SAY "LIST_RC     IS" List_rc
SAY "NEVER_TSO   IS" NEVER_TSO
SAY "NONTSS      IS" NONTSS
SAY "PROFILE     IS" PROFILE
SAY "TSOUSERS    IS" TSOUSERS
SAY "TSSNAME     IS" TSSNAME
SAY "TSSTSO      IS" TSSTSO
SAY "UADS        IS" UADS
exit 0
getdata: procedure expose secrc idlist.
/** copied from getdata due to lazyness                  **/
ARG FIELD
/* SAY "        "
SAY "getdata:" ACID FIELD */
HEX00 = '00'X
/** IF THE FIELD REQUESTED IS ONE THAT NEEDS MULTIPLE    **/
/** WORDS PASSED BACK TO THE CALLER THEN SET THE MULT.  **/
/** VARIABLE TO YES BELOW... DIR JAN 97                 **/
MULT.USED = "YES"
MULT.NAME = "YES"
MULT.PROFILES = "YES"
MULT.BYPASSING = "YES"
MULT.ATTRIBUTES = "YES"
GOTIT = "NO"
IF DATA = " " THEN DATA = "BASIC"
SIGNAL ON ERROR NAME SEEYA
DO X = 1 TO IDLIST.0
  X1 = X+1 ; X2 = X+2 ; X3 = X+3 ; X4 = X+4
  /****************************/
  /* REPLACE X'00' WITH X'40' */
  /****************************/
  idlist.X=TRANSLATE(idlist.X," ",HEX00)
  PARSE VAR idlist.X W.1 W.2 W.3 W.4 W.5 W.6 W.7 W.8 W.9 W.10 W.11 W.12
  WNUM = WORDS(idlist.X)
  DO T = 1 TO WNUM
    IF WORD(idlist.X,T) = FIELD THEN DO
      /*    SAY "getdata: LINE IS " idlist.X
      SAY "getdata: FIELD IS" FIELD
      SAY "getdata: GOT IT ON LINE " X " WORD " T   */
      T1 = T + 1
      T2 = T + 2
      T3 = T + 3
      SECRC = W.T2
      /* SAY "getdata: SETTING INITIAL SECRC TO " SECRC */
      IF FIELD = "DEPT" THEN SECRC = W.T3
      IF (FIELD = "TYPE") & (W.T3 = "C/A") THEN
        SECRC = SECRC||"CA"
 /*   IF FIELD = "NAME" THEN */
 /*     SECRC = SECRC  W.T3  */
      /**************************************************/
      /** BELOW IS SUPPORT FOR A FIELD THAT HAS MULTIPLE*/
      /** PARMS, LIKE PROFILES ...DIR 2 MAY 96          */
      /**************************************************/
      IF MULT.FIELD = "YES" THEN DO
        IF FIELD = "PROFILES" THEN DO
          /**************************************/
          /** IF IT IS A PROFILES REQUEST WE   **/
          /** SCAN AHEAD AND LOAD THE CURRENT  **/
          /** LINE WITH ALL THE PROFILES IN THE**/
          /** NEXT 4 LINES, THUS SUPPORTING 5  **/
          /** FULL LINES OF PROFILES OR 20 OF  **/
          /** THOSE BUGGARS.   DIR 2 MAY 96    **/
          /**************************************/
          /* SAY "getdata: PROFILE ROUTINE IN CONTROL"        */
          NW1 = WORD(idlist.X1,1)
          NW2 = WORD(idlist.X2,1)
          NW3 = WORD(idlist.X3,1)
          NW4 = WORD(idlist.X4,1)
          IF NW1 = "PROFILES" THEN W.8 = SUBSTR(idlist.X1,14)
          IF NW2 = "PROFILES" THEN W.9 = SUBSTR(idlist.X2,14)
          IF NW3 = "PROFILES" THEN W.10 = SUBSTR(idlist.X3,14)
          IF NW4 = "PROFILES" THEN W.11 = SUBSTR(idlist.X4,14)
          /**************************************/
          /** LETS TELL THE NEXT ROUTINE THERE **/
          /** ARE MORE WORDS THAN THERE USED TO**/
          /** BE IN THE CURRENT LINE.DR 2 MAY96*/
          /**************************************/
          WNUM = 11
        END
        /*SAY "getdata: MULTIPLE WORD FIELD DETECTED."    */
        /*SAY "getdata: COUNTING FROM "T2 " TO " WNUM     */
        ALLDATA = ""
        DO W1 = T2 TO WNUM
          IF W.W1 = "=" THEN LEAVE /* WE HAVE HIT THE NEXT VALUE */
          ALLDATA = ALLDATA  W.W1
        END
        SECRC = ALLDATA
      END
      GOTIT = "YES"
    END
    IF GOTIT = "YES" THEN LEAVE
  END
  IF GOTIT = "YES" THEN LEAVE
END
SIGNAL OFF ERROR
/*****************************************************************/
/** NOT FINDING AN INTERVAL MAY BE OK PASS BACK A ZERO.         **/
/*****************************************************************/
IF (GOTIT = "NO") & (FIELD = "INTERVAL") & (DATA ¬= "BASIC") THEN DO
  GOTIT = "YES"
  SECRC = 0
END
IF GOTIT = "YES" THEN DO
  /* SAY "getdata: FIELD "FIELD" WAS FOUND. VALUE IS " SECRC   */
  return
END
SECRC = "$NOTFOUND"
/* SAY "getdata: FIELD "FIELD" WAS NOT FOUND. SECRC IS " SECRC  */
return
BADDATA: NOP
SECRC  = "$BADTSS"
SAY "getdata: ERROR ROUTINE ENTERED, LIST DATA IS" DATA
SAY "getdata: "ACID FIELD DATA
IF WORD(idlist.1,1) = "TSS0352E" THEN DO
  SECRC = "$BADAUTH"
  SAY "getdata: ID IS NOT OWNED WITHIN SCOPE OF CONTROL"
END
SAY "getdata: SECRC IS BEING SET TO " SECRC
return 08
SEEYA: NOP
SAY "getdata: AN ERROR HAS OCCURED IN LINE "SIGL
return 16
