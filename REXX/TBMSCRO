/** rexx                                                 **/
/**********************************************************/
/** BASELINE BASELINE BASELINE BASELINE BASELINE BASELINE**/
/**********************************************************/
/** EXEC NAME        : TBMSCR                            **/
/** LAST MODIFIED    : 15 APR 98                         **/
/**----------------INPUT REQUIRED -----------------------**/
/** PASSED ARGS        VALID VALUES                      **/
/** INDSN   :  THE FLATFILE ( OR PDS MEM) THAT HAS THE   **/
/**            SCREEN OPTION LIST TO BE PROCESSED.       **/
/** OUTDSN  :  A DSN THAT IS IN THE ISPTLIB CONCATENATION**/
/**            FOR ALL USERS OF THE PANEL SYSTEM.        **/
/** TBNAME  :  THE NAME OF THE OUTPUT TABLE, THIS MUST   **/
/**            MATCH THE NAME SPECIFIED IN TSSINI.       **/
/** AUTHMAX :  THE MAXIMUM AUTH LEVEL OF INPUT COMMAND TO**/
/**            BE INCLUDED IN THE OUTPUT TABLE.          **/
/** STOREOPT:  IF NO THEN I DO NOT STORE THE TABLE       **/
/**                                                      **/
/**----------------OUTPUT PRODUCED-----------------------**/
/** VALID CONDITION CODES - 00                           **/
/** ISPF VARIABLES        - NONE                         **/
/**----------------REQUIREMENTS--------------------------**/
/** CAN RUN STANDALONE : YES                             **/
/** ISPF ENVIRONMENT   : YES                             **/
/** MY IO ROUTINES     : NEXTREC FILEREAD AND RECDEF     **/
/** EXECS CALLED WITHIN THIS EXEC : NONE                 **/
/**                                                      **/
/**********************************************************/
DEFINE_RECORD = START
DDNAME = INPUT1
FILEREAD.INPUT1.READNUM = 0
FNAME   = 1 21
CMDLINE = 23 15
VARS    = 41 31
AUTH    = 79 2
CALL RECDEF
ARG INDSN OUTDSN TBNAME AUTHMAX STOREOPT
/************************************************************/
TB_PREFIX = "TS5USC"
IF INDSN   = ""   THEN INDSN = "SYS3.TSS.PARMLIB(SCREEN)"
IF INDSN   = "."  THEN INDSN = "SYS3.TSS.PARMLIB(SCREEN)"
IF OUTDSN  = ""   THEN OUTDSN = "SYS3.TSS.TABLE"
IF OUTDSN  = "."  THEN OUTDSN = "SYS3.TSS.TABLE"
IF AUTHMAX = ""   THEN AUTHMAX= 10
IF AUTHMAX = "."  THEN AUTHMAX= 10
IF TBNAME  = "."  THEN TBNAME = TB_PREFIX||AUTHMAX
IF TBNAME  = ""   THEN TBNAME = TB_PREFIX||AUTHMAX
SAY "TBMSCR : PROVIDED VALUES RESOLVED TO:"
SAY "       INDSN   :" INDSN
SAY "       OUTDSN  :" OUTDSN
SAY "       TBNAME  :" TBNAME
SAY "       AUTHMAX :" authmax
SAY "       STOREOPT:" storeopt
IF SUBSTR(INDSN,1,1) /= "'" THEN INDSN = "'"||INDSN||"'"
IF SUBSTR(OUTDSN,1,1) /= "'" THEN OUTDSN = "'"||OUTDSN||"'"
say "TBMSCR: indsn resolved to :" indsn
say "TBMSCR: outdsn resolved to :" outdsn
"ALLOC DDN(INPUT1) DSN("INDSN") SHR REUS"
SIGNAL OFF ERROR
IF STOREOPT /= "NO" THEN   do
  "ALLOC DDN(OUTPUT) DSN("OUTDSN") SHR REUS"
  ADDRESS ISPEXEC "TBERASE "TBNAME "LIBRARY(OUTPUT)"
  SAY "ERASE    RC IS "RC "FOR " TBNAME
end
ADDRESS ISPEXEC "TBCREATE "TBNAME" KEYS(FNAME) ",
   "NAMES(CMDLINE VARS AUTH ) SHARE"
SAY "TBCREATE RC IS "RC "FOR " TBNAME
ADDRESS ISPEXEC " TBSORT "TBNAME" FIELDS(FNAME,C,A)"
say "TBSORT  RC is " rc
trace off
CALL FILEREAD "INPUT1"                /* READ DDNAME INPUT1 */
RECNUM = RESULT
SAY "EOF =" FILEREAD.INPUT1.EOF       /* THE EOF FLAG       */
SAY "RECORDS READ IS" RECNUM
DO X = 1 TO RECNUM
  /* SAY "X IS" X  */
  CALL NEXTREC "INPUT1"               /* FILL FIELDS FOR ME */
  IF COMMENT = "*" THEN ITERATE X
  IF AUTH > AUTHMAX THEN ITERATE X
  FNAME = STRIP(FNAME,L)
  IF X = 1 THEN
    ADDRESS ISPEXEC " TBADD "TBNAME " ORDER MULT(250)"
  IF X > 1 THEN
    ADDRESS ISPEXEC " TBMOD "TBNAME " ORDER "
  /* SAY FNAME CMDLINE VARS AUTH */
END
ADDRESS ISPEXEC " TBQUERY "TBNAME" POSITION(ADDED)"
SAY "NUMBER OF ROWS IN TABLE "TBNAME "IS " ADDED
ADDRESS ISPEXEC " TBSORT "TBNAME" FIELDS(FNAME,C,A)"
say "TBSORT  RC is " rc
IF STOREOPT = "NO" THEN
  SAY "TABLE CREATED FOR TEMPORARY USE NO STORE WILL BE DONE."
ELSE
  ADDRESS ISPEXEC " TBCLOSE "TBNAME" LIBRARY(OUTPUT)"
SAY "TBCLOSE RC IS " RC
/***********************************************/
"FREE DDN(INPUT1)"
"FREE DDN(OUTPUT)"
EXIT 0
/***********************************************/
/***********************************************/
/***********************************************/
/***********************************************/
/***********************************************/
/***********************************************/
/***********************************************/
/***********************************************/
/***********************************************/
/***********************************************/
/***********************************************/
/***********************************************/
/************************************************************/
/**  Dave Russells easy file i/o routines version 2        **/
/************************************************************/
/**  two sample execs are included at the bottom of this   **/
/**  deck, one that reads an entire file with one pass and **/
/**  one that reads a file 1000 records at a time.         **/
/************************************************************/
/************************************************************/
/* These routines are meant to be used together for easy    */
/* input processing they are:                               */
/************************************************************/
/* Recdef  : To define the record format                    */
/*           reserves the following vars:                   */
/*           all RECDEF.    variables                       */
/* the single define area must have these attributes:       */
/*    it must begin with the 'exact' statement              */
/*     DEFINE_RECORD = START                                */
/*    it must have one set of these statements for each file*/
/*    defined:                                              */
/*      DDNAME = INPUT1         <=== The ddname of the file */
/*      FILEREAD.INPUT1.READNUM =  ##                       */
/*       the numbers of records to read per call of         */
/*       the fileread routine ( 0 = all the records at once)*/
/************************************************************/
/************************************************************/
/* Fileread: to read the file into memory                   */
/*           reserves the following vars:                   */
/*           all FILEREAD.  variables                       */
/*   -Input- FILEREAD.DDNAME.READNUM =   The # of records u */
/*           want read in ( for large file that cant be done*/
/*           all at once )                                  */
/*           FILEREAD.DDNAME.DEBUG   = yes/no show debugs   */
/*  -Output- RESULT                    The # of records read*/
/*           FILEREAD.DDNAME.0       = the # of records     */
/*           FILEREAD.DDNAME.#       = the data             */
/*           FILEREAD.DDNAME.EOF     = "YES" if last batch  */
/*           -------------------------                      */
/* will set RCODE of 4 if called and no recs are left       */
/************************************************************/
/* NEXTREC ddname : to load fields( in recdef) with next    */
/*           rec data updates the fields in recdef          */
/* Format for define area                                   */
/* line format       --- meaning                            */
/* ---------------------------------------------            */
/* varname = 1           It is word 1 in the rec            */
/* varname = 3 all       Starts at word 3 for all record    */
/* varname = 7 8         It starts @ col 7 for 8            */
/* varname = 7 0         It starts @ col 7 for whole record */
/* ----WARNING: MAX LENGTH OF A REXX VARIABLE IS 250--------*/
/************************************************************/
/* ----WARNING: The NEXTREC routine does not use a procedure*/
/* ----expose to shield the main routine from its processing*/
/* ----since it must update field name variables.           */
/************************************************************/
/***********************************************/
/** the nextrec  routine                      **/
/***********************************************/
NEXTREC: NOP
/*                                                       */
ARG DDNAME
RCODE = 0
HOLDLEN = 0
NEXTREAD = "NEXTREAD"
/*************************************************/
/* lets figure out whats the next record to read */
/*************************************************/
IF DATATYPE(FILEREAD.DDNAME.NEXTREAD) \= "NUM" THEN
  FILEREAD.DDNAME.NEXTREAD = 0
FILEREAD.DDNAME.NEXTREAD = FILEREAD.DDNAME.NEXTREAD + 1
READ = FILEREAD.DDNAME.NEXTREAD
/*******************************************************/
/* read now has the record number we want to deal with */
/*******************************************************/
IF READ = "FILEREAD."DDNAME"."NEXTREAD THEN RETURN 4
/*******************************************************/
/* above is the check to be sure the record exists     */
/* if not we leave with a rc of 4 saying we are done   */
/*******************************************************/
DO Q = 1 TO RECDEF.DDNAME.0  /* STEP THRU THE FIELDS OF THE RECORD) */
  FIELD =  RECDEF.DDNAME.Q
  VALID = SYMBOL(FILEREAD.DDNAME.READ)
  IF VALID = "LIT" THEN do
    SAY "NEXTREC: NO SUCH RECORD "
    SAY "read is" read
    SAY filename.ddname.read
  END
  IF VALID = "LIT" THEN EXIT 04
  HOLD1 = RECDEF.DDNAME.Q.START
  HOLD2 = RECDEF.DDNAME.Q.END
  IF ((HOLD2 = "ALL") | (HOLD2 = "")),
    & (WORDS(FILEREAD.DDNAME.READ) < HOLD1) THEN DO
    HOLD = ""
    INTERPRET FIELD '=' '"'HOLD'"'
    ITERATE Q
  END
  IF DATATYPE(HOLD2) = "NUM" THEN
    HOLD = SUBSTR(FILEREAD.DDNAME.READ,HOLD1,HOLD2)
  IF HOLD2 = 0 THEN
    HOLD = SUBSTR(FILEREAD.DDNAME.READ,HOLD1)
  IF HOLD2 = "ALL" THEN DO
    TEMP1 = WORD(FILEREAD.DDNAME.READ,HOLD1)
    COUNT = HOLD1 - 1
    DO T1 = 1 TO COUNT
      HOLDLEN = LENGTH(WORD(FILEREAD.DDNAME.READ,T1)) + HOLDLEN
    END
    POINT = INDEX(FILEREAD.DDNAME.READ,TEMP1,HOLDLEN)
    HOLD = SUBSTR(FILEREAD.DDNAME.READ,POINT)
  END
  IF HOLD2 = " " THEN
    HOLD = WORD(FILEREAD.DDNAME.READ,HOLD1)
  /****************************************/
  /** the data can contain single or     **/
  /** double quotes not both or we get   **/
  /** a nasty abend ....                 **/
  /****************************************/
  IF (INDEX(HOLD,'"') > 0) & (INDEX(HOLD,"'") > 0) THEN DO
    SAY "***********FATAL ERROR*********************"
    SAY "***********FATAL ERROR*********************"
    SAY "*******************************************"
    SAY "DATA CONTAINS BOTH SINGLE AND DOUBLE QUOTES"
    SAY "*******************************************"
    SAY "***********FATAL ERROR*********************"
    SAY "***********FATAL ERROR*********************"
    EXIT 16
  END
  IF INDEX(HOLD,'"') = 0 THEN
    INTERPRET FIELD '=' '"'HOLD'"'
  ELSE
    INTERPRET FIELD "=" "'"HOLD"'"
END
RETURN 0
/***********************************************/
/***********************************************/
/***********************************************/
/** the fileread routine                      **/
/***********************************************/
FILEREAD: PROCEDURE EXPOSE RECDEF. FILEREAD.
ARG DDNAME
NUM = FILEREAD.DDNAME.READNUM
IF FILEREAD.DDNAME.DEBUG = "YES" THEN SAY "READNUM IS " NUM
  /***********************************************/
  /* check for eof already                      **/
  /***********************************************/
IF FILEREAD.DDNAME.EOF = "YES" THEN
  SAY "FILEREAD: NO MORE RECORDS IN FILE " DDNAME
  /***********************************************/
  /* if already eof seeya cant complete read.   **/
  /***********************************************/
IF FILEREAD.DDNAME.EOF = "YES" THEN EXIT 04
  /***********************************************/
  /* default is to read all records             **/
  /***********************************************/
IF DATATYPE(NUM) \= "NUM" THEN NUM = "*"
  /***********************************************/
  /* first read start at record # 1             **/
  /***********************************************/
BEGIN = FILEREAD.DDNAME.NEXTREC
IF DATATYPE(BEGIN) /= "NUM" THEN
  BEGIN = 1
  /***********************************************/
  /* otherwise increment by readnum             **/
  /***********************************************/
ELSE BEGIN = BEGIN + NUM
IF FILEREAD.DDNAME.DEBUG = "YES" THEN  SAY "BEGIN IS" BEGIN
FILEREAD.DDNAME.NEXTREC = BEGIN
FILEREAD.DDNAME.READ = "INITIALIZED"
IF NUM = 0 THEN NUM = "*"
/******************************************/
/** a debug is below                     **/
/******************************************/
IF FILEREAD.DDNAME.DEBUG = "YES" THEN  SAY,
 "EXECIO "NUM" DISKR "DDNAME BEGIN,
 "( FINIS STEM FILEREAD."DDNAME".)"
/******************************************/
/** end debug                            **/
/******************************************/
 "EXECIO "NUM" DISKR "DDNAME BEGIN,
 "( FINIS STEM FILEREAD."DDNAME".)"
FILEREAD.DDNAME.NEXTREAD = 0 /* TELL NEXTREC  TO START AT 0 AGAIN */
RCODE = RC
  /***********************************************/
  /* THE FIRST EOF IS NOT AN ERROR WE EXIT      **/
  /* NORMALLY AND SET THE EOF FLAG              **/
  /***********************************************/
IF RC = 2 THEN FILEREAD.DDNAME.EOF = "YES"
/******************************************/
/** make result the number of records    **/
/** read                                 **/
/******************************************/
RETURN FILEREAD.DDNAME.0
/***********************************************/
/***********************************************/
/***********************************************/
/** THE DEFINE RECORD ROUTINE                 **/
/***********************************************/
RECDEF: PROCEDURE EXPOSE DDNAME RECDEF.
IF RECDEF.FOUND = "RECDEF.FOUND" THEN RECDEF.FOUND = 0
STOP  = SOURCELINE()
DO T = 1 TO STOP
  HOLD = SOURCELINE(T)
  IF WORD(HOLD,1) = "/*" THEN ITERATE  T
  IF INDEX(HOLD,"DEFINE_RECORD") > 0 THEN RECDEF_START = T
  /* IF INDEX(HOLD,"DEFINE_RECORD") > 0 THEN SAY HOLD */
  IF WORD(HOLD,2) = "RECDEF" THEN RECDEF_END  = T
  IF WORD(HOLD,2) = "RECDEF" THEN LEAVE
END
/* SAY RECDEF_START RECDEF_END */
DO X = RECDEF_START TO RECDEF_END
  /**********************************************/
  /* LETS LOOK FOR THE RECDEF AREA OF THIS EXEC */
  /**********************************************/
  RECDEF_LINE = SOURCELINE(X)
  UPPER RECDEF_LINE
  /**********************************************/
  /* BELOW IS THE SKIP LIST FOR LINES TO IGNORE */
  /**********************************************/
  IF INDEX(RECDEF_LINE,"FILEREAD.") > 0 THEN ITERATE X
  IF INDEX(RECDEF_LINE,"DEFINE_RECORD") > 0 THEN ITERATE X
  IF INDEX(RECDEF_LINE,"/*") > 0 THEN ITERATE X
  IF INDEX(RECDEF_LINE,"=") = 0 THEN ITERATE X /* BAD FORMAT */
  /**********************************************/
  /* END OF SKIP LIST                           */
  /**********************************************/
  PARSE VAR RECDEF_LINE W1 W2 W3 W4
  IF W1 = "DDNAME" THEN FILE = STRIP(W3)
  IF INDEX(RECDEF_LINE,"DDNAME") > 0 THEN ITERATE X
  /* SAY FILE W1 W2 W3 W4 */
  /**********************************************/
  /* REMEMBER THE FIELD ATTR OF EACH FILE       */
  /**********************************************/
  IF RECDEF.FILE.0 = "RECDEF."FILE".0" THEN RECDEF.FILE.0 = 0
  RECDEF.FILE.0 = RECDEF.FILE.0 + 1      /* THE NUMBER OF FIELDS */
  HOLD = RECDEF.FILE.0
  RECDEF.FILE.HOLD = W1                  /* THE FIELD NAME       */
  RECDEF.FILE.HOLD.START = W3              /* THE START POS        */
  RECDEF.FILE.HOLD.END = W4                /* THE END POS          */
  IF W4 > 250 THEN SAY "FATAL: VARIABLES CANNOT EXCEED LENGTH OF 250"
  IF W4 > 250 THEN EXIT 16
END
/* SAY "RECORD DEFINITION IS FROM LINE" X "TO LINE "SIGL */
RETURN
/*********************************************************************/
/* Example program below for one pass  read                          */
/*                                                                   */
/* DEFINE_RECORD = START                                             */
/* DDNAME = INPUT1                                                   */
/* FILEREAD.INPUT1.READNUM = 10                                      */
/* ACID = 1 16                                                       */
/* DEPT = 2                                                          */
/* REST = 4 ALL                                                      */
/* NAME = 3                                                          */
/* DDNAME = INPUT2                                                   */
/* FILEREAD.INPUT2.READNUM = 100                                     */
/* ACID2= 8 8                                                        */
/* DEPT2= 2                                                          */
/* NAME2= 32 22                                                      */
/* CALL RECDEF                                                       */
/* "ALLOC DDN(INPUT1) DSN('TECH.thedata.C1')                         */
/* "ALLOC DDN(INPUT2) DSN('TECH.thedata.C2')                         */
/* CALL FILEREAD "INPUT1"                                            */
/* RECNUM = RESULT                                                   */
/* SAY "EOF =" FILEREAD.INPUT1.EOF                                   */
/* SAY "RECORDS READ IS" RECNUM                                      */
/* CALL FILEREAD "INPUT2"                                            */
/* RECNUM = RESULT                                                   */
/* SAY "EOF =" FILEREAD.INPUT2.EOF                                   */
/* SAY "RECORDS READ IS" RECNUM                                      */
/* DO X = 1 TO RECNUM                                                */
/*   CALL NEXTREC "INPUT1"                                           */
/*   SAY "ACID=" ACID "DEPT=" DEPT                                   */
/*   CALL NEXTREC "INPUT2"                                           */
/*   SAY "ACID2=" ACID2 "DEPT2=" DEPT2                               */
/* END                                                               */
/* "FREE DDN(INPUT1)"                                                */
/* "FREE DDN(INPUT2)"                                                */
/* EXIT 00                                                           */
/*                                                                   */
/*********************************************************************/
/* Example program below for multi pass read 1000 rec at a time      */
/*                                                                   */
/* DEFINE_RECORD = START                                             */
/* DDNAME = INPUT1                                                   */
/* FILEREAD.INPUT1.READNUM = 1000                                    */
/* FILL1   = 1 4                                                     */
/* TYPE    = 5 4                                                     */
/* CONTINUE = 11 1                                                   */
/* ACID    = 15 8                                                    */
/* DATA    = 33 40                                                   */
/* CALL RECDEF                                                       */
/* indsn = "tech.sca.tsscfile"                                       */
/* "alloc ddn(input1) dsn('"indsn"') shr reus"                       */
/*signal off error                                                   */
/*call off error                                                     */
/*cont_num = 0                                                       */
/*fileread.input1.debug = "NO"                                       */
/*do until fileread.input1.eof = "YES"                               */
/*  call fileread "input1"                                           */
/*  recnum = result                                                  */
/*  do x = 1 to recnum                                               */
/*    call nextrec "input1"                                          */
/*    if continue = "C" then cont_num = cont_num + 1                 */
/*  end                                                              */
/*end                                                                */
/*                                                                   */
