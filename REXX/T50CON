/** rexx                                                 **/
/**********************************************************/
/** added code to use FDT segment names                  **/
/**********************************************************/
/** added code to ignore dept/div/profile passwords      **/
/**********************************************************/
/** added more parm based processing                     **/
/**********************************************************/
/** added  parm based parsing                            **/
/**********************************************************/
/** bypassing iterate error.                             **/
/**********************************************************/
/** fixed reformatter error...                           **/
/**********************************************************/
/** added omvs support                                   **/
/**********************************************************/
/** REMOVED DUPLICATE OUTPUT LINES  SO AS TO STREAMLINE  **/
/** THE OUTPUT ID...                                     **/
/**********************************************************/
/** ADDED SUPPORT FOR LSCA AND SCA JOBCARD CHANGE        **/
/** SPECIFYING USER=MSCA ON THE JOBCARD.                 **/
/**********************************************************/
/** FIXED ADMIN ACID( SUPPORT..                          **/
/**********************************************************/
/** REDID THE RDT AREA FOR THE NEW ADDITION SYNTAX       **/
/**********************************************************/
/** ADDED SUPPORT FOR TSOOPTION PARM                     **/
/**********************************************************/
/** ADDED SUPPORT FOR ZCA DCA VCA CONVERSION             **/
/**********************************************************/
/** ADDED MSGS FOR MFAC CONVERSION                       **/
/**********************************************************/
/** SUPPORTS RDT AND LINEFORMATTING                      **/
/**********************************************************/
/** SUPPORTS TIMES/DAYS/LOCKTIMES                        **/
/**********************************************************/
/** THE NEWER STREAMLINED CONVERT FUNCTION.              **/
/** THE LOGIC SHOULD BE ALOT MORE READABLE ...           **/
/**********************************************************/
/** EXEC NAME        : T50CON                            **/
/** LAST MODIFIED    : 10 aug 98                         **/
/**----------------INPUT REQUIRED -----------------------**/
/** PASSED ARGS        VALID VALUES                      **/
/** ACID    :  THE PROFILE TO MANIPULATE                 **/
/** NEWACID :  THE NAME THE ACID IS TO BE RENAMED TO     **/
/** NEWTYPE :  THE NEW TYPE OF ACID TO BE CREATED        **/
/**                                                      **/
/** ISPF VGETS         VALID VALUES                      **/
/** CONVOPT : THE INTERNAL OUT OPTION "DATASETÂ¦INTERNAL" **/
/** DISP    : THE DISP OF THE BATCH FILE                 **/
/** DS1     : THE INTERIM OUTPUT FILE                    **/
/** DS2     : THE BATCH FILE                             **/
/** newpass : THE password to plug into IDs when it cant **/
/**           be determined                              **/
/**                                                      **/
/**----------------OUTPUT PRODUCED-----------------------**/
/** VALID CONDITION CODES - 00                           **/
/** ISPF VARIABLES        - SECRC                        **/
/**                                                      **/
/**----------------REQUIREMENTS--------------------------**/
/** CAN RUN STANDALONE : NO                              **/
/** ISPF ENVIRONMENT   : YES                             **/
/** EXECS CALLED WITHIN THIS EXEC :                      **/
/**********************************************************/
/** ARRAY VARIABLES                           EXAMPLE    **/
/**------------------------------------------------------**/
/** CMD.    = THE VALID COMMANDS 4 THIS ENT    "ADD REM" **/
/** TYPE.   = THE RESOURCE TYPE                "DATASET" **/
/** ACID.   = THE TARGET ACID FOR EACH CMD     " ??    " **/
/** RSNAME. = THE RESOURCE NAME                "SYS1.  " **/
/** DAYS.   = THE VALID DAYS                   "MON,TUE" **/
/** TIME.   = THE VALID TIMES                  "08,18  " **/
/** ACCESS. = THE ACCESS LEVEL                 "UPDATE " **/
/** ACTION. = THE ACTION TO TAKE               "FAIL   " **/
/** UNTIL.  = THE EXPIRE   DATE OF RULE "UNTIL(03/30/97)"**/
/** LIBRARY = THE RUNTIME LIBRARY       "SYS1.LINKLIB   "**/
/** FACILITY= THE AUTHD FAC FOR ACCESS  "TSO,BATCH      "**/
/**********************************************************/
/** Multi word parm stuff:                               **/
/**                                                      **/
/** In ALL below examples t1 has been set to the first   **/
/** word in the line and t2 has been set to the second.  **/
/** ( note the 0 prefixed values are always literals )   **/
/**                                                      **/
/** MULTI.T1.T2.0PRECMD        The # of commands to be   **/
/**                      issued prior to value checking  **/
/**                      This must correspond to the     **/
/**                      below commands.                 **/
/** MULTI.T1.T2.0PRECMD.1      Command # 1               **/
/** MULTI.T1.T2.0PRECMD.2      Command # 2               **/
/** MULTI.T1.T2.0ITERATE       0 = suffix to prev line   **/
/**                            1 = make a new line       **/
/**                                                      **/
/** SNAME                      The segment for this rule **/
/**                      to be activated (used below)    **/
/** MULTI.T1.T2.SNAME          The value "YES"           **/
/** MULTI.T1.T2.0TYPE          The type of resource      **/
/**                      (example - DSN )                **/
/** MULTI.T1.T2.0CMD           The tss cmd ( ADD or PER) **/
/** MULTI.T1.T2.0RSNAME        The TSS resource(example -**/
/**                      the dataset name)               **/
/**                                                      **/
/**                                                      **/
/**********************************************************/
/**                                                      **/
/** Single word rules stuff:                             **/
/**                                                      **/
/**                                                      **/
/**  THOLD               The first word on the data line **/
/**                 that will trigger this rule          **/
/**                                                      **/
/**  SNAME               The section name that must match**/
/**                 the current section for this rule    **/
/**                                                      **/
/**  ITERATE.thold.sname  Will I add line(s) to output ? **/
/**                                                      **/
/**  ITERATE.thold        How many lines...              **/
/**                                                      **/
/**  TYPE.thold           The RDT data type or "$$" to   **/
/**                 bypass command build logic, and build**/
/**                 your own command                     **/
/**  CMD.thold           The command add or per or rev.. **/
/**  RSNAME.thold        The resource name to be used in **/
/**                  the command or if you specified $$  **/
/**                  in the type field above, the actual **/
/**                  rexx interpret command to be issued **/
/**                                                      **/
/**                                                      **/
/**------------------------------------------------------**/
/** OUTNUM=THE # OF INPUT RESOURCE LINES                 **/
/** BATFILE.  = THE ACTUAL CHANGES TO BE WRITTEN TO DS2  **/
/**                                                      **/
/**********************************************************/
ARG ACID NEWACID NEWTYPE
maint = "june 4 1999"
say "T50CON: in control with parms " acid newacid newtype
say "T50CON: Maint = " maint
if acid = "BYPASS" then do
  say "T50CON: bypass detected other parms ignored."
  newacid = ""
  newtype = ""
end
SIGNAL ON ERROR NAME SEEYA
HEX00 = '00'X
DISP = "SHR"
SYSENV = SYSVAR(SYSENV)
SECRC = "FAILED IN T50CON. NO OTHER INFORMATION AVAILABLE"
IF SYSENV = "FORE" THEN DO
  SECRC = "FAILED WHILE GETTING VARIABLES FROM ISPPROF"
  SECRC = SECRC||" TRY 'REINIT' OPTION"
  ADDRESS ISPEXEC "VPUT SECRC PROFILE"
  ADDRESS ISPEXEC "VGET NEWPASS PROFILE"
  ADDRESS ISPEXEC "VGET DISP PROFILE"
  ADDRESS ISPEXEC "VGET DS2 PROFILE"
  ADDRESS ISPEXEC "VGET DS1 PROFILE"
  ADDRESS ISPEXEC "VGET CONVOPT PROFILE"
END
SECRC = "FAILED DURING JOBCARD FUNCTION"
/*                          */
CREATE.   =  ""
UNTIL.    =  ""
TYPE.     =  ""
CMD.      =  ""
ACCESS.   =  ""
RSNAME.   =  ""
LIBRARY.  =  ""
PRECMD.   =  ""
DAYS.     =  ""
TIME.     =  ""
FACILITY. =  ""
PRIVPGM.  =  ""
ACTION.   =  ""
DEPT      =  ""
ZONE      =  ""
DIV       =  ""
ACID.0    =  ACID
IF NEWACID /= "" THEN ACID.1 = NEWACID
/********************************/
COMMAND.  = "ADD"
SEGMENT   =  "ADMINISTRATIONAUTHORITIES"
COMMAND.SEGMENT  = "ADMIN"
/********************************/
/********************************/
/** LOCK TIME segment          **/
/** an example of using the    **/
/** postcmd processor for      **/
/** value resolution.          **/
/********************************/
TLINE                    = "LOCK TIME"
T1                       = WORD(TLINE,1)
T2                       = WORD(TLINE,2)
MULTI.T1.T2.0PRECMD      = 2
MULTI.T1.T2.0PRECMD.1    = "FAC =','w.6"
MULTI.T1.T2.0PRECMD.2    = "IF W.6 = 'ALL' THEN FAC = ''"
MULTI.T1.T2.0ITERATE     = 1
SNAME                    = "AUTHORITY"
                         /*****************************************/
                         /* The YES below activates this rule set */
                         /* for the above segment name            */
                         /*****************************************/
MULTI.T1.T2.SNAME        = "YES"
MULTI.T1.T2.0POSTCMD     = 3
MULTI.T1.T2.0POSTCMD.1   = "TYPE.OUTNUM = '$$'"
MULTI.T1.T2.0POSTCMD.2   = "CMD.OUTNUM = 'ADD'"
MULTI.T1.T2.0POSTCMD.3   = "RSNAME.OUTNUM = 'LTI('W.3||FAC')'"
/********************************/
/** LIST DATA segment          **/
/********************************/
TLINE                    = "LIST DATA"
T1                       = WORD(TLINE,1)
T2                       = WORD(TLINE,2)
MULTI.T1.T2.0ITERATE     = 1
SNAME                    = "ADMINISTRATIONAUTHORITIES"
                         /*****************************************/
                         /* The YES below activates this rule set */
                         /* for the above segment name            */
                         /*****************************************/
MULTI.T1.T2.SNAME        = "YES"
MULTI.T1.T2.0TYPE        = "$$"
MULTI.T1.T2.0CMD         = "'ADMIN'"
MULTI.T1.T2.0RSNAME      = "'DATA('W.3' 'W.4')'"
/********************************/
/** XA DATASET segment         **/
/********************************/
TLINE                    = "XA DATASET"
T1                       = WORD(TLINE,1)
T2                       = WORD(TLINE,2)
MULTI.T1.T2.0ITERATE     = 1
SNAME                    = "AUTHORITY"
                         /*****************************************/
                         /* The YES below activates this rule set */
                         /* for the above segment name            */
                         /*****************************************/
MULTI.T1.T2.SNAME        = "YES"
MULTI.T1.T2.0TYPE        = "DSN"
MULTI.T1.T2.0CMD         = "PER"
MULTI.T1.T2.0RSNAME      = "W.3"
MULTI.T1.T2.0UNTIL       = "W.4"
/********************************/
/** single word rules are below**/
/********************************/
THOLD                = "GROUP"
SNAME                = "AUTHORITY"
                         /*****************************************/
                         /* The YES below activates this rule set */
                         /* for the above segment name            */
                         /*****************************************/
ITERATE.THOLD.SNAME  = "YES"
ITERATE.THOLD        = 1
TYPE.THOLD           = "$$"
CMD.THOLD            = "ADD"
RSNAME.THOLD         = "'GROUP('W.2 w.3 w.4 w.5')'"
/********************************/
/********************************/
THOLD                = "XA"
SNAME                = "AUTHORITY"
                         /*****************************************/
                         /* The YES below activates this rule set */
                         /* for the above segment name            */
                         /*****************************************/
ITERATE.THOLD.SNAME  = "YES"
ITERATE.THOLD        = 1
TYPE.THOLD           = "W.2"
CMD.THOLD            = "PER"
RSNAME.THOLD         = "W.3"
UNTIL.THOLD          = "W.4"
/********************************/
THOLD                = "FACILITIES"
SNAME                = "ADMINISTRATIONAUTHORITIES"
                         /*****************************************/
                         /* The YES below activates this rule set */
                         /* for the above segment name            */
                         /*****************************************/
ITERATE.THOLD.SNAME  = "YES"
ITERATE.THOLD        = 1
TYPE.THOLD           = "'FACILITY'"
CMD.THOLD            = "ADMIN"
RSNAME.THOLD         = "W.2 W.3"
/********************************/
THOLD                = "ACID"
SNAME                = "ADMINISTRATIONAUTHORITIES"
                         /*****************************************/
                         /* The YES below activates this rule set */
                         /* for the above segment name            */
                         /*****************************************/
ITERATE.THOLD.SNAME  = "YES"
ITERATE.THOLD        = 1
TYPE.THOLD           = "'ACID'"
CMD.THOLD            = "ADMIN"
RSNAME.THOLD         = "W.2"
/********************************/
THOLD                = "ACCESS"
SNAME                = "ADMINISTRATIONAUTHORITIES"
                         /*****************************************/
                         /* The YES below activates this rule set */
                         /* for the above segment name            */
                         /*****************************************/
ITERATE.THOLD.SNAME  = "YES"
SNAME                = "AUTHORITY"
ITERATE.THOLD.SNAME  = "YES"
ITERATE.THOLD        = 0
ACCESS.THOLD         = "'ACCESS('W.2')'"
/********************************/
THOLD                = "BYPASSING"
SNAME                = "BASE"
                         /*****************************************/
                         /* The YES below activates this rule set */
                         /* for the above segment name            */
                         /*****************************************/
ITERATE.THOLD.SNAME  = "YES"
SNAME                = "AUTHORITY"
                         /*****************************************/
                         /* The YES below activates this rule set */
                         /* for the above segment name            */
                         /*****************************************/
ITERATE.THOLD.SNAME  = "YES"
ITERATE.THOLD        = 1
TYPE.THOLD           = "$$"
CMD.THOLD            = "ADD"
                     /*******************************/
                     /* only one precmd             */
                     /*******************************/
PRECMD.THOLD         = 1
PRECMD.THOLD.1       = 'W.2 = TRANSLATE(W.2," ",",")'
                     /*******************************/
                     /* get rid of commas in auths  */
                     /*******************************/
RSNAME.THOLD         = "W.2"
/********************************/
THOLD                = "SITRAN"
SNAME                = "SEGMENTCICS"
                         /*****************************************/
                         /* The YES below activates this rule set */
                         /* for the above segment name            */
                         /*****************************************/
ITERATE.THOLD.SNAME  = "YES"
ITERATE.THOLD        = 1
TYPE.THOLD           = "$$"
CMD.THOLD            = "ADD"
RSNAME.THOLD         = "'SIT('W.2','W.4')'"
/********************************/
THOLD                = "PROFILE"
SNAME                = "AUTHORITY"
                         /*****************************************/
                         /* The YES below activates this rule set */
                         /* for the above segment name            */
                         /*****************************************/
ITERATE.THOLD.SNAME  = "YES"
ITERATE.THOLD        = 1
TYPE.THOLD           = "$$"
CMD.THOLD            = "ADD"
RSNAME.THOLD         = "'PROF('W.2')' W.3 W.4"
/********************************/
THOLD                = "PROFILES"
SNAME                = "AUTHORITY"
                         /*****************************************/
                         /* The YES below activates this rule set */
                         /* for the above segment name            */
                         /*****************************************/
ITERATE.THOLD.SNAME  = "YES"
ITERATE.THOLD        = 1
TYPE.THOLD           = "$$"
CMD.THOLD            = "ADD"
RSNAME.THOLD         = "'PROF('W.2 W.3 W.4')'"
/********************************/
SEGMENT   =  "BASE"
IF DISP = "" THEN DISP = SHR
DATA="ALL,EXPIRE"
SIGNAL OFF ERROR
  /******************************************************************/
SECRC = "FAILED, CHECK IDS EXISTANCE AND YOUR AUTHORITY."
IF ACID  = "BYPASS" THEN DO
  SAY "T50CON: BYPASS SPECIFIED ALLOCATING INPUT DSN"
  "ALLOC DDN(INPUT) DSN("DS1") REUS"
  "EXECIO * DISKR INPUT (FINIS STEM INLINE.)"
  SS= OUTTRAP('off')
  IDTYPE = "USER"
  END
ELSE DO
  say "T50CON: calling tss for list of id " acid
  ADDRESS TSO "%T50GDAT "ACID " TYPE "
  ADDRESS ISPEXEC "VGET SECRC PROFILE"
  IDTYPE = SECRC
  say "T50CON: type is " idtype
  IF IDTYPE = "$BADTSS" THEN DO
    say "T50CON: FATAL ERROR. T50GDAT failed TYPE retrieval."
    secrc ="ID is unlistable check ownership and existance of ID."
    address ispexec "vput secrc profile"
    exit 04
    END
  IF CONVOPT = "DATASET" THEN DO
    say "T50CON: dataset output specified allocating output dsn"
    "%T50LSTO " ACID " ALL,EXPIRE" DS1
    "ALLOC DDN(INPUT) DSN("DS1")"
    "EXECIO * DISKR INPUT (FINIS STEM INLINE.)"
    SS= OUTTRAP('off')
    END
  ELSE DO
    say "T50CON: no id list output being generated, data being "
    say "T50CON: manipulated internally  "
    SS = OUTTRAP('INLINE.')
    SAY "TSS LIST("ACID") DATA("DATA")"
    ADDRESS TSO "TSS LIST("ACID") DATA("DATA")"
    SS= OUTTRAP('DROPIT.')
  END
END
SIGNAL ON ERROR NAME SEEYA
say "T50CON: checking/allocating dsn" ds2
JPARM = "RANDOM"
/***************************************************/
/* PUT THE MSCA ID ON THE JOBCARD IF SCA OR LSCA   */
/***************************************************/
IF (IDTYPE = "LIMITED") | (IDTYPE = "CENTRAL") THEN JPARM = "SUPER"
ADDRESS TSO "%T50JCARD" DS2 JPARM
"ALLOC DDN(BJCL) DSN("DS2") MOD REUS"
  /******************************************************************/
EQUALLOC = INDEX(INLINE.1,"=")
IF EQUALLOC = 0 THEN DO
  SAY "*************************************************************"
  SAY "*************************************************************"
  SAY "*************************************************************"
  SAY "T50CON: ERROR I AM UNABLE TO INITIALIZE THE EQUALLOC VARIABLE"
  SAY "T50CON: THE TSS VERSION 5 DEFAULT OF 11 IS BEING USED        "
  SAY "*************************************************************"
  SAY "*************************************************************"
  SAY "*************************************************************"
  EQUALLOC = 12
END
EQUALLOC = EQUALLOC - 1
say "T50CON: equal location is " equalloc
GOTOUTPUT: NOP
THISREC    = 3
OUTNUM     = 0
REALOUT    = 0
CREATE_NUM = 0
CREATE.0 = 0
SECRC = "FAILED, DURING CONVERT LOGIC ."
say "T50CON: has a total record count of " inline.0
DO I = 1 TO INLINE.0
  REFORMAT = "NO"        /* THIS LINE HASNT BEEN CHANGED YET */
  T2 = I/100
  /* IF T2 = FORMAT(T2,4,0) THEN SAY I */
  LINE = INLINE.I
  LINE = TRANSLATE(LINE," ","=")  /* REPLACE = WITH SPACES */
  LINE= TRANSLATE(LINE," ",HEX00) /* KILL THOSE HEX 00 */
  NEXT = I + 1
  NEXTLINE = INLINE.NEXT
  IF WORD(LINE,1) = "XA" THEN DO  /* KILL THE OWNER STATEMENT */
    LINE = SUBSTR(LINE,1,59)
  END
  Q = NEXT
  IF (INDEX(LINE,"*ALL*") <> 0) & (INDEX(LINE,"VOLUMES") =0 ) THEN DO
    PARSE VAR LINE HOLD0 '*ALL*' HOLD1
    LINE = HOLD0||"ALL"||HOLD1
    say "T50CON: removing *all* from line"
  END
  PARSE VAR LINE W.1 W.2 W.3 W.4 W.5 W.6 W.7,
  W.8 W.9 W.10 W.11 W.12
  FIRST13 = SUBSTR(LINE,1,EQUALLOC)
  /***********************************/
  /** DETERMINE THE segment IN CASE **/
  /** WE NEED IT LATER.  DIR 15AUG97**/
  /***********************************/
  IF W.1 = "ACCESSORID" THEN segment = "BASE"
  IF W.1 = "CREATED" THEN segment =  "AUTHORITY"
  IF (W.1 = "LAST") & (W.2 = "USED") THEN segment =  "AUTHORITY"
  IF (W.1 = "PASSWORD") & (W.2 = "*NONE*") THEN ITERATE I
  IF  W.1 = "-----------" THEN segment =  W.2||W.3
  IF  W.1 = "-----------" THEN Say "T50CON: Segment changed to "segment
  CMD_DEFAULT = COMMAND.SEGMENT
  IF  W.1 = "-----------" THEN iterate i
  /***********************************/
  /** END OF segment LOGIC          **/
  /***********************************/
  IF W.1 = "ACIDS" THEN FLUSH = "YES"
  IF W.1 = "ACIDS" THEN ITERATE I
  IF W.2 = "LIST(ACIDS)" THEN ITERATE I /* AN ECHO OF THE ISSUED CMD */
  IF (SUBSTR(LINE,1,4) = "ACID"),
    & (segment /= "ADMINISTRATIONAUTHORITIES") THEN ITERATE I
  IF W.1 = "***" THEN ITERATE I
  IF LINE = "             " THEN ITERATE I
  IF W.3 = "NAME" THEN NAME = W.4 W.5 W.6 W.7 W.8
  IF W.1 = "TYPE" THEN TYPE = W.2
  IF TYPE = "CENTRAL" THEN TYPE = "SCA"
  /**************************************************/
  /* LETS FIGURE OUT IF THIS ID IS AN ADMINISTRATOR */
  /**************************************************/
  IF W.3 = "C/A"  THEN TYPE = SUBSTR(TYPE,1,1)||"CA"
  IF W.3 = "LIMITED" THEN TYPE = "LSCA"
  IF (W.1 = "ZONE") & (W.2 = "ACID")  THEN ZONE = W.3
  IF (W.1 = "DEPT") & (W.2 = "ACID")  THEN DEPT = W.3
  IF (W.1 = "DIV") & (W.2 = "ACID")  THEN DIV = W.3
  IF W.1 = "CREATED" THEN CALL MAKEACID
  IF W.1 = "CREATED"  THEN ITERATE I
  IF W.1 = "TYPE"  THEN ITERATE I
  IF W.1 = "DEPT"  THEN ITERATE I
  IF W.1 = "ZONE"  THEN ITERATE I
  IF W.1 = "DIV"   THEN ITERATE I
  IF W.1 = "LAST"  THEN ITERATE I
  IF W.1 = "TSS0300I"  THEN ITERATE I
  IF FIRST13 = "LCF FAC      " THEN LCFFAC = W.3
  IF FIRST13 = "LCF FAC      " THEN ITERATE I
  IF FIRST13 \= "             " THEN DO
    /**********************************************************/
    /** I SAVE THE LAST TIME THAT THE 13 CHARACTERS EXISTED  **/
    /** BECAUSE IF THE LINE IS REALLY INDENTED THEN THOSE    **/
    /** CHARACTERS ARE GOING TO OVERLAYED ON THIS LINE IN    **/
    /** A DESPERATE ATTEMPT TO FIGURE OUT WHAT TYPE OF       **/
    /** RESOURCE IS BEING DEALT WITH. DIR 2 APR 97           **/
    /**********************************************************/
    SAVE13 = FIRST13
    FLUSH = "NO"
  END
  /**********************************************************/
  /** below is the logic for dropping lines with entries   **/
  /** we dont need. the most common example is a profiles  **/
  /** acids segment.             dir 10 aug 98             **/
  /**********************************************************/
  IF (SUBSTR(LINE,1,13) = "             ") & (FLUSH = "YES"),
  THEN DO
    say " T50CON: 13 leading blanks found flushing line #: " i
    SAY LINE
    ITERATE I
  END
  /**********************************************************/
  /** BELOW IS THE REFORMATTER AREA. SOME TSS RULES ARE SO **/
  /** WEIRDLY SETUP I JUST CREATE A $$ TYPE LINE FOR THEM  **/
  /** OR OTHERWISE CHANGE THEM                             **/
  /**********************************************************/
  IF FIRST13 = "             " THEN DO
    NEWLINE = SAVE13 W.1 W.2 W.3 W.4 W.5 W.6 W.7 W.8
    PARSE VAR NEWLINE W.1 W.2 W.3 W.4 W.5 W.6 W.7,
    W.8 W.9 W.10 W.11 W.12
    say "T50CON: I am reformatting line #" i " to the following"
    REFORMAT = "YES"
    /************************************************************/
    /** THE ABOVE FLAG IS SET SO THAT THE BELOW ROUTINES CAN   **/
    /** DETERMINE IF THE LINE WAS ORIGINALLY BLANK FROM 1-13   **/
    /** THIS IS A GOOD WAY TO FIND OUT IF YOU HAVE A           **/
    /** CONTINUATION THAT HAS TO BE DEALT WITH...DIR 9 JULY 97 **/
    /************************************************************/
    SAY NEWLINE
    LINE = NEWLINE
    IF WORDS(NEWLINE) > 12 THEN DO
      SAY "******************************************************"
      SAY "******************************************************"
      SAY "T50CON: TRUNCATION HAS OCCURED IN REFORMATTING        "
      SAY "******************************************************"
      SAY "******************************************************"
    END
  END
  /*************************************************************/
  WORD1 = W.1
  WORD2 = W.2
  IF MULTI.WORD1.WORD2.segment = "YES" THEN DO
    /* say "entering dynam routine outnum is :" outnum   */
    OUTNUM = OUTNUM + MULTI.WORD1.WORD2.0ITERATE
    /* say "after resolution  outnum is :" outnum   */
    /* say "T50CON: multi match on line" i" words: "word1 word2  */
    /*say "T50CON: input cmd/rsname values are below"            */
    /*say multi.word1.word2.0cmd multi.word1.word2.0rsname       */
    /****************************************/
    /* check for precmd value and issue   it*/
    /****************************************/
    VALID = DATATYPE(MULTI.WORD1.WORD2.0PRECMD)
    if valid = "NUM" then do cnum = 1 to MULTI.WORD1.WORD2.0PRECMD
      SAY "T50CON: precmd issueing:" MULTI.WORD1.WORD2.0PRECMD.cnum
      INTERPRET MULTI.WORD1.WORD2.0PRECMD.cnum
    end
    /****************************************/
    /* check for RSNAME value and resolve it*/
    /****************************************/
    VALID = MULTI.WORD1.WORD2.0RSNAME
    IF VALID /= "MULTI."WORD1"."WORD2".0RSNAME" THEN DO
      HOLDVAL = "RSNAME.OUTNUM  = " MULTI.WORD1.WORD2.0RSNAME
      INTERPRET HOLDVAL
    end
    /****************************************/
    /* check for TYPE value and resolve it*/
    /****************************************/
    VALID = MULTI.WORD1.WORD2.0TYPE
    IF VALID /= "MULTI."WORD1"."WORD2".0TYPE" THEN DO
      HOLDVAL = "TYPE.OUTNUM    = " MULTI.WORD1.WORD2.0TYPE
      INTERPRET HOLDVAL
    end
    /****************************************/
    /* check for access value and resolve it*/
    /****************************************/
    VALID = MULTI.WORD1.WORD2.0ACCESS
    IF VALID /= "MULTI."WORD1"."WORD2".0ACCESS" THEN DO
      HOLDVAL = "ACCESS.OUTNUM  = " MULTI.WORD1.WORD2.0ACCESS
      INTERPRET HOLDVAL
    end
    /****************************************/
    /* check for CMD value and resolve it */
    /****************************************/
    VALID = MULTI.WORD1.WORD2.0CMD
    IF VALID /= "MULTI."WORD1"."WORD2".0CMD" THEN DO
      HOLDVAL = "CMD.OUTNUM    = " MULTI.WORD1.WORD2.0CMD
      INTERPRET HOLDVAL
    end
    /****************************************/
    /* check for UNTIL value and resolve it */
    /****************************************/
    VALID = MULTI.WORD1.WORD2.0UNTIL
    IF VALID /= "MULTI."WORD1"."WORD2".0UNTIL" THEN DO
      HOLDVAL = "UNTIL.OUTNUM  = " MULTI.WORD1.WORD2.0UNTIL
      INTERPRET HOLDVAL
    end
    /****************************************/
    /* check for postcmd value and issue  it*/
    /****************************************/
    VALID = DATATYPE(MULTI.WORD1.WORD2.0POSTCMD)
    IF VALID = "NUM" THEN DO CNUM = 1 TO MULTI.WORD1.WORD2.0POSTCMD
      SAY "T50CON: Postcmd issueing:" MULTI.WORD1.WORD2.0POSTCMD.CNUM
      INTERPRET MULTI.WORD1.WORD2.0POSTCMD.CNUM
    END
    SAY "T50CON: Multi match output for line "i" is : ",
    cmd.outnum type.outnum rsname.outnum access.outnum
    ITERATE I
  END
  IF ITERATE.WORD1.segment = "YES" THEN DO
    /*                                               */
    /*SAY "SINGLE LINE=" W.1 W.2 W.3 W.4 W.5 W.6 W.7 */
    /*say "T50CON: segment is " segment              */
    /*say "T50CON: found single match on line "i" word: "WORD1  */
    OUTNUM = OUTNUM + ITERATE.WORD1
    if datatype(precmd.word1) = "NUM"  then
      do cnum = 1 to precmd.word1
      say "T50CON: precommand "cnum" of "precmd.word1 precmd.word1.cnum
      interpret precmd.word1.cnum
    end
    if rsname.word1 /= "" then do
      holdval = "rsname.outnum  = " rsname.word1
      interpret holdval
    end
    if access.word1 /= "" then do
      holdval = "access.outnum  = " access.word1
      interpret holdval
    end
    if until.word1 /= "" then do
      holdval = "until.outnum  = " until.word1
      interpret holdval
    end
    if cmd.word1 /= "" then do
      holdval = "cmd.outnum  = " cmd.word1
      interpret holdval
    end
    if type.word1 /= "" then do
      holdval = "type.outnum  = " type.word1
      interpret holdval
    end
    if datatype(postcmd.word1) = "NUM" then
      do cnum = 1 to postcmd.word1
      say "T50CON: postcmd "cnum" of "postcmd.word1 postcmd.word1.cnum
      interpret postcmd.word1.cnum
    end
    SAY "T50CON: Lone  match output for line "i" is : ",
      cmd.outnum type.outnum rsname.outnum access.outnum
    ITERATE I
  END
  /*************************************************************/
  /*************************************************************/
  /**  end of dynamic area                                   ***/
  /*************************************************************/
  /*************************************************************/
  IF (W.1 = "MASTER") & (W.2 = "FAC") THEN DO
    OUTNUM = OUTNUM + 1
    TYPE.OUTNUM = "$$"
    CMD.OUTNUM = "ADD"
    RSNAME.OUTNUM = "MAS("W.3")"
    MSG2 = "WARNING: THE SOURCE ID ("ACID") IS THE MASTERID OF A",
    "FACILITY ("W.3")."
    ADDRESS ISPEXEC "VPUT MSG2 PROFILE"
    ITERATE I
  END
  IF (W.1 = "EXMP") & (W.2 = "CMDS") THEN DO
    OUTNUM = OUTNUM + 1
    TEMP1 = W.3","W.4","W.5","W.6
    TEMP1 = STRIP(TEMP1,T,",")
    TYPE.OUTNUM = "$$"
    CMD.OUTNUM = "ADD"
    RSNAME.OUTNUM = "XCMD("LCFFAC",("TEMP1"))"
    CMD_DEFAULT = "PER"
    ITERATE I
  END
  IF (W.1 = "AUTH") & (W.2 = "CMDS") THEN DO
    OUTNUM = OUTNUM + 1
    TEMP1 = W.3","W.4","W.5","W.6
    TEMP1 = STRIP(TEMP1,T,",")
    TYPE.OUTNUM = "$$"
    CMD.OUTNUM = "ADD"
    RSNAME.OUTNUM = "CMD("LCFFAC",("TEMP1"))"
    /* CMD_DEFAULT = "PER"  */
    ITERATE I
  END
  /**************************************************/
  /* THIS IS THE START OF THE RDT                   */
  /* THIS FUNCTION MAY PRODUCE MORE THAN 80 CHAR    */
  /* OUTPUT                            DIR 4 APR 97 */
  /**************************************************/
  IF ACID  = "RDT" THEN DO
    TYPE.OUTNUM = "$$"
    CMD.OUTNUM = "ADD"
    IF ((W.1 = "RESOURCE") & (W.2= "CLASS")) | (W.1 = "TSS0300I" ),
    THEN DO
      OUTNUM = OUTNUM + 1
      RSNAME.OUTNUM = "RESCLASS("RCLASS")",
      " RESCODE("RCODE")  "
      IF ATTR Â¬= "" THEN DO
        RSNAME.OUTNUM = RSNAME.OUTNUM||"ATTR("ATTR") "
      END
      IF ACLIST1 Â¬= "" THEN DO
        RSNAME.OUTNUM = RSNAME.OUTNUM||"ACLST("ACLIST","ACLIST1")"
      END
      ELSE DO
        IF ACLIST Â¬= "" THEN
          RSNAME.OUTNUM = RSNAME.OUTNUM||"ACLST("ACLIST")"
      END
      IF RCLASS = "RCLASS" THEN OUTNUM = OUTNUM - 1 /* KILL LINE 1 */
      RCLASS = W.3
      ATTR= ""
      ACLIST1 = ""
      ACLIST = ""
      DEFACC= ""
    END
    IF (W.1 = "RESOURCE") & (W.2= "CODE") THEN
      RCODE = SUBSTR(W.3,3,2)
    IF (W.1 = "ATTRIBUTE") THEN
      ATTR = W.2
    IF (W.1 = "ACCESS") & (ACLIST Â¬= "" ) THEN DO
      W.2= TRANSLATE(W.2,"",")")   /* REPLACE ) WITH NULLS */
      W.2= TRANSLATE(W.2,"=","(")  /* REPLACE ) WITH = */
      W.2= TRANSLATE(W.2," ",",")  /* REPLACE , WITH   */
      PARSE VAR W.2 T.1 T.2 T.3 T.4 T.5 T.6 T.7 T.8 T.9 T.10 T.11 T.12
      SAY W.2
      WORDNUM = WORDS(W.2)
      HOLD1 = T.WORDNUM
      LOOPNUM = WORDNUM - 1
      DO Q2 = LOOPNUM TO 1 BY -1
        HOLD1 = HOLD1||","T.Q2
      END
      ACLIST1 = HOLD1
    END
    IF (W.1 = "ACCESS") & (ACLIST = " " ) THEN DO
      W.2= TRANSLATE(W.2,"",")")   /* REPLACE ) WITH NULLS */
      W.2= TRANSLATE(W.2,"=","(")  /* REPLACE ) WITH = */
      W.2= TRANSLATE(W.2," ",",")  /* REPLACE , WITH   */
      PARSE VAR W.2 T.1 T.2 T.3 T.4 T.5 T.6 T.7 T.8 T.9 T.10 T.11 T.12
      WORDNUM = WORDS(W.2)
      HOLD1 = T.WORDNUM
      LOOPNUM = WORDNUM - 1
      DO Q2 = LOOPNUM TO 1 BY -1
        HOLD1 = HOLD1||","T.Q2
      END
      ACLIST= HOLD1
    END
    IF (W.1 = "DEFACC") THEN
      DEFACC= W.2
    ITERATE I
  END
  /* SAMPLE RDT ADD IS BELOW                                      */
  /*  TSS ADD(RDT) RESCLASS(BUDGET) RESCODE(30)                   */
  /*  ATTR(LONG,GENERIC,DEFPROT) -                                */
  /*  ACLST(ALL,ADD=000E,CHANGE=0006,USE=0002,NONE) DEFACC(NONE)  */
  /**************************************************/
  /* THIS IS THE END OF THE RDT AREA                */
  /**************************************************/
  IF W.1 = "DAYS" THEN DO
    DAYS.OUTNUM = "DAYS("W.2")"
    IF INDEX(W.3,"TIMES(") = 1 THEN
      TIME.OUTNUM = W.3
    IF W.2 = "ALL" THEN DAYS.OUTNUM = ''
    /**************************************************/
    /* IF THE W.3 WORD IS TIMES( THEN THE RULE IS     */
    /* TIMES( ANY ) . IN THIS CASE JUST ERASE IT.     */
    /**************************************************/
    IF W.3 = "TIMES(" THEN TIME.OUTNUM = ''
    ITERATE I
  END
  IF W.1 = "SOURCES" THEN DO
    W.1 = "SOURCE"
    CMD_DEFAULT  = "ADD"
  END
  IF W.1 = "INSTDATA" THEN DO
    OUTNUM = OUTNUM + 1
  /*********************************************************/
  /** ONE OF MY CLASSIC DEBUGS IS BELOW                   **/
  /*SAY "T50CON: AT  INSTDATA I IS " I "OUTNUM IS " OUTNUM */
  /*********************************************************/
    CMD.OUTNUM = "ADD"
    TYPE.OUTNUM = "INSTDATA"
    RSNAME.OUTNUM ="'"||STRIP(SUBSTR(LINE,14,59))||"'"
    CMD.OUTNUM = "ADD"
    TYPE.OUTNUM = "INSTDATA"
    ITERATE I
  END
  IF W.1 = "ACCESSORID" THEN DO
    FLUSH = "YES"
    TEMP = OUTNUM + 1
    CMD_DEFAULT = "ADD"
    IF W.2 = "*RDT*" THEN W.2 = "RDT"
    IF W.2 = "*STC*" THEN W.2 = "STC"
    IF W.2 = "*AUDIT*" THEN W.2 = "AUDIT"
    ACID = W.2
    ACID.TEMP   = W.2
    if newacid /= "" then acid.temp = newacid
    /******************************************************/
    /** WE CHANGE THE ACID TO SUPPORT AN INPUT STREAM    **/
    /** WITH MORE THAN ONE LISTED ACID THIS WOULD BE     **/
    /** USED IF WE HAD A BYPASS PARM TO A LIST(ACIDS) DSN**/
    /******************************************************/
    IF ACID = "*ALL*" THEN ACID = "ALL"
    IF ACID = "*STC*" THEN ACID = "STC"
    ITERATE I
  END
  IF W.1 = "LIBRARY" THEN DO
    LIBRARY.OUTNUM = "LIB("W.2")"
    ITERATE I
  END
  IF W.1 = "PRIVPGM" THEN DO
    IF REFORMAT = "YES" THEN DO   /* WE HAVE MULTI LINES OF PGMS */
      LENP = LENGTH(PRIVPGM.OUTNUM) - 1
      H1 = SUBSTR(PRIVPGM.OUTNUM,1,LENP)
      PRIVPGM.OUTNUM = H1 STRIP(W.2 W.3 W.4 W.5 W.6)||")"
    END
    ELSE   /* IF IT IS NOT MULTIPLE LINES OF PGMS */
      PRIVPGM.OUTNUM = "PRIVPGM("STRIP(W.2 W.3 W.4 W.5 W.6)")"
    ITERATE I
  END
  IF W.1 = "FAC" THEN DO
    FACILITY.OUTNUM = "FAC("W.2")"
    ITERATE I
  END
  IF W.1 = "PASSWORD" THEN DO
    OUTNUM = OUTNUM  + 1
    RSNAME.OUTNUM = "PASSWORD("W.2",90)"
    IF W.2 = "*NOPW*" THEN
      RSNAME.OUTNUM = "PASSWORD(NOPW,0)"
    CMD.OUTNUM = "REP"
    TYPE.OUTNUM = "$$"
    ITERATE I
  END
  IF W.1 = "ATTRIBUTES" THEN DO
    OUTNUM = OUTNUM + 1
    W.2  = TRANSLATE(W.2," ",",") /* REPLACE COMMAS WITH SPACES */
    RSNAME.OUTNUM = W.2
    CMD.OUTNUM = "ADD"
    TYPE.OUTNUM = "$$"
    ITERATE I
  END
  IF W.1 = "BYPASSING" THEN DO
    OUTNUM = OUTNUM + 1
    W.2  = TRANSLATE(W.2," ",",") /* REPLACE COMMAS WITH SPACES */
    RSNAME.OUTNUM = W.2
    CMD.OUTNUM = "ADD"
    TYPE.OUTNUM = "$$"
    ITERATE I
  END
  IF W.1 = "ACTION" THEN DO
    ACTION.OUTNUM = "ACTION("W.2")"
    ITERATE I
  END
  IF W.3 = "NAME" THEN DO
    ITERATE I
  END
  IF W.1 = "FACILITY" THEN DO
    OUTNUM = OUTNUM + 1
    TYPE.OUTNUM = "FACILITY" ; RSNAME.OUTNUM = W.2
    CMD.OUTNUM = "ADD"
    ITERATE I
  END
  IF ACID = "STC" THEN DO
    IF W.2 = "SIZE" THEN ITERATE I
    OUTNUM = OUTNUM + 1
    IF W.2 = "*DEF*" THEN W.2 = "DEFAULT"
    IF W.5 = "*FAIL*" THEN W.4 = "FAIL"
    IF W.5 = "*DORM*" THEN W.4 = "DORM"
    IF W.5 = "*BYPASS*" THEN W.4 = "BYPASS"
    IF W.5 = "*WARN*" THEN W.4 = "WARN"
    CMD.OUTNUM = "ADD"
    TYPE.OUTNUM = "$$"
    RSNAME.OUTNUM = "PROC("W.2")               "
    TEMP1 = SUBSTR(RSNAME.OUTNUM,1,17)
    RSNAME.OUTNUM = TEMP1 "ACID("W.4")"
    ITERATE I
  END
  /**************************/
  /* MY BABY FALL THRU AREA */
  /**************************/
  IF W.2 = " " THEN ITERATE
  IF SUBSTR(LINE,1,2) = "  " THEN DO
    SAY "************************************************"
    SAY "************************************************"
    SAY "T50CON: UNRECOGNIZED INDENTED LINE # " I
    SAY   LINE
    SAY "************************************************"
    SAY "************************************************"
  END
  say "T50CON: fallthru line:"i" segment:" segment "word1:"w.1
  OUTNUM = OUTNUM + 1
  TYPE.OUTNUM = W.1 ; RSNAME.OUTNUM = W.2
  CMD.OUTNUM = CMD_DEFAULT
  /**************************************************/
  DO XX = 3 TO 8
    /*SAY XX IS PAR.XX */
    /**************************************************/
    /* NOTE THAT BLANKS AND HEX 00S FAIL THE BELOW    */
    /* CHECK SO THAT SOME COLUMNS THAT ARE ALWAYS IN  */
    /* IDS BUT ARE SOMETIMES BLANKS ARE NOT NORMALLY  */
    /* PROCESSED.                 DIR                 */
    /**************************************************/
    IF WORDS(W.XX) <> 0 THEN DO
      say "T50CON: fallthru routine parsing "w.xx
      OUTNUM = OUTNUM + 1
      RSNAME.OUTNUM = W.XX
      TYPE.OUTNUM = W.1
      CMD.OUTNUM = CMD_DEFAULT
    END
  END
END
SAY "T50CON : OUTNUM = " OUTNUM
BYEBYE: NOP
/**************************************************/
/**************************************************/
/* THE ACTUAL OUTPUT IS CREATED BELOW FROM THE    */
/* INPUT LINES. SOME FORMATTING IS DONE UNLESS THE*/
/* THE TYPE VARIABLE IS "$$" IN WHICH CASE THE    */
/* RSNAME VARIABLE IS APPENDED TO THE ID AND      */
/* COMMAND AND ISSUED WITH NO FORMATTING. THIS    */
/* ALLOWS THE ABOVE ROUTINES TO PREPROCESS SOME   */
/* ENTRY TYPES THAT ARE COMPLEX. DIR 2 APR 97     */
/**************************************************/
/**************************************************/
DO X = 1 TO OUTNUM
  Y  = X + 1          /* IN CASE WE LOOK AT THE NEXT LINE */
  B4 = X - 1          /* IN CASE WE LOOK AT THE PREVIOUS LINE */
  IF ACID.X = "ACID."||X THEN ACID.X = ACID.B4
  REALOUT = REALOUT + 1
  /**************************************************/
  /* A STANDARD DSN PERMIT IS BELOW DIR 2 APR 97    */
  /**************************************************/
  BATFILE.X = " TSS "CMD.X"("ACID.X") "TYPE.X"("RSNAME.X") "ACCESS.X,
    UNTIL.X LIBRARY.X FACILITY.X PRIVPGM.X DAYS.X TIME.X ACTION.X
  /**************************************************/
  /* A PREFORMATTED COMMAND JUST ISSUE IT           */
  /**************************************************/
  IF TYPE.X = "$$" THEN
    BATFILE.X = " TSS "CMD.X"("ACID.X") "RSNAME.X
  BATFILE.X = STRIP(BATFILE.X,T)
  /**************************************************/
  /* INSTDATA IS HANDLED SPECIAL BECAUSE IT CAN BE  */
  /* SO LONG IT GETS ITS OWN LINE DIR 2 APR 97      */
  /**************************************************/
  IF TYPE.X = "INSTDATA" THEN DO
    SAY "                       ***********                       "
    SAY "T51: BEGINNING OF INSTDATA PARSING ROUTINE. LINE IS BELOW"
    SAY BATFILE.X
    PARSE VAR BATFILE.X W.1 W.2 W.3 W.4 W.5 W.6 W.7
    OUTPUT.REALOUT = " "W.1 W.2 "+"
    SAY OUTPUT.REALOUT
    REALOUT = REALOUT + 1
    OUTPUT.REALOUT = "    "STRIP(W.3 W.4 W.5 W.6 W.7)
    SAY OUTPUT.REALOUT
    ITERATE X
  END
  /**************************************************/
  /* IF IT IS TOO LONG ILL BREAK IT UP              */
  /**************************************************/
  IF LENGTH(BATFILE.X)  > 72 THEN DO
    say "T50CON: line too long reformatting for output of 72"
    PARSE VAR BATFILE.X W.1 W.2 W.3 W.4 W.5 W.6 W.7
    OUTPUT.REALOUT = " "W.1 W.2 W.3 "+"
    REALOUT = REALOUT + 1
    OUTPUT.REALOUT = "    "STRIP(W.4 W.5 W.6 W.7)
    IF LENGTH(OUTPUT.REALOUT) > 72 THEN DO
      say "T50CON: breaking up data lines."
      say "T50CON: w4 and w5:" w.4 w.5
      say "T50CON: w6 and w7:" w.6 w.7
      OUTPUT.REALOUT = "    "W.4 W.5" +"
      REALOUT = REALOUT + 1
      V4 = ""
      OUTPUT.REALOUT = W.6 ", + "
      /***********************************************/
      /** IF W6 IS MULTIPLE WORDS SEPERATED BY      **/
      /** COMMAS THEN WE WILL SEPERATE THEM. 30JUL97**/
      /***********************************************/
      IF WORDS(TRANSLATE(W.6," ",",")) >  3 THEN DO
        PARSE VAR W.6 V1 ',' V2 ',' V3 ',' V4
        OUTPUT.REALOUT = "    "V1","V2","V3", + "
      END
      REALOUT = REALOUT + 1
      OUTPUT.REALOUT = "    "V4  W.7
      REALOUT = REALOUT + 1
      OUTPUT.REALOUT = "    "
    END
  END
  ELSE DO
    OUTPUT.REALOUT = BATFILE.X
  END
END
LASTCMD = "DUMMY"
DO T2 = 2 TO REALOUT
  B4 = T2 - 1
  IF OUTPUT.T2 = LASTCMD THEN DO
    SAY "DUPLICATE LINE DROPPED #" T2 OUTPUT.T2
    OUTPUT.T2 = " "
  END
  IF OUTPUT.T2 /= " " THEN LASTCMD = OUTPUT.T2
  /* SAY "LASTCMD IS "LASTCMD */
END
SECRC = "FAILED, DURING OUTPUT RESOLUTION CHECK OUTPUT STREAM."
"EXECIO "CREATE.0" DISKW BJCL ( FINIS STEM CREATE.)"
say "T50CON: output lines is " realout
REALOUT = REALOUT + 1
OUTPUT.REALOUT = "@@"
"EXECIO "REALOUT" DISKW BJCL ( FINIS STEM OUTPUT.)"
"FREE DDN(BJCL)"
 SECRC = "TSA515W: Unsupported function completed. Output in " DS2
 IF SYSENV = "FORE" THEN
   ADDRESS ISPEXEC "VPUT SECRC PROFILE"
EXIT 0
/* NOTE THAT NO NORMAL COMPLETION MESSAGE IS ISSUED */
SEEYA: NOP
SIGNAL OFF ERROR
SAY "T50CON: ERRORL IN LINE " SIGL
SAY SOURCELINE(SIGL)
/* SECRC = "T50CON: ERROR IN LINE"  SIGL  */
ADDRESS ISPEXEC "VPUT SECRC PROFILE"
"FREE DDN(BATFILE)"
EXIT 0
/**********************************************/
/**********************************************/
/***** SUBROUTINES SUBROUTINES  ***************/
/**********************************************/
/**********************************************/
MAKEACID: PROCEDURE EXPOSE ACID I INLINE. NAME TYPE DIV DEPT,
  ZONE OUTNUM CREATE. CREATE_NUM NEWACID NEWTYPE NEWPASS
/**********************************************/
IF NEWACID \= ''  THEN ACID = NEWACID
IF NEWTYPE \= ''  THEN TYPE = NEWTYPE
IF NEWTYPE = "LSCA" THEN OWNER = "OWNER"
USER_FLAG = "YES"
IF TYPE = "TYPE" THEN USER_FLAG = "$$"
IF TYPE = "DIVISION" THEN USER_FLAG = "NO"
IF TYPE = "GROUP" THEN USER_FLAG = "NO"
IF TYPE = "DIV" THEN TYPE= "VCA"
IF TYPE = "DEPT" THEN USER_FLAG = "NO"
IF TYPE = "PROFILE" THEN USER_FLAG = "NO"
IF TYPE = "ZONE" THEN USER_FLAG = "NO"
IF ZONE \= " " THEN OWNER = "ZONE"
IF ZONE \= " " THEN AREA = ZONE
IF DIV  \= " " THEN OWNER = "DIV"
IF DIV  \= " " THEN AREA  =  DIV
IF DEPT \= " " THEN OWNER = "DEPT"
IF DEPT \= " " THEN AREA  =  DEPT
CREATE_NUM = CREATE_NUM + 1
CREATE.CREATE_NUM = " TSS CRE("ACID") NAME('"NAME"') +"
IF USER_FLAG = "YES" THEN
  T = "  "OWNER"("AREA")   TYPE("TYPE") PASSWORD("NEWPASS")"
ELSE
  T = "  "OWNER"("AREA")   TYPE("TYPE")"
IF OWNER = "OWNER" THEN T = "   TYPE("TYPE") PASSWORD("NEWPASS")"
IF TYPE = "DIVISION "THEN T = "   TYPE("TYPE")"
IF USER_FLAG = "$$" THEN DO
  SAY "*********************************************************"
  SAY "T50CON: MAKEACID ROUTINE ABORTING DUE TO LACK OF USER TYPE"
  SAY "T50CON: ACID = "ACID
  SAY "*********************************************************"
  RETURN
END
DIV = ""
DEPT = ""
ZONE = ""
CREATE_NUM = CREATE_NUM + 1
CREATE.CREATE_NUM = "  "T
CREATE_NUM = CREATE_NUM + 1
CREATE.CREATE_NUM = "  "
CREATE.0 = CREATE_NUM
say "T50CON: leaving makeacid routine # lines out = " create.0
RETURN
