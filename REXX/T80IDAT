/** REXX THE WONDER DOG                                  **/
/**********************************************************/
/** EXEC NAME        : T80IDAT                           **/
/** LAST MODIFIED    :  may 10 2007                      **/
/**********************************************************/
/** Update the INSTDATA of an individual ACID            **/
/**********************************************************/
/**********************************************************/
/** Idata format                                         **/
/** first 20 characters are the enum and function flag   **/
/** from 21 on it is the lanid or whatever you want....  **/
/**                                                      **/
/**                                                      **/
/**********************************************************/
/**----------------OUTPUT PRODUCED-----------------------**/
/**                                                      **/
/**                                                      **/
/**  Detailed return code:                               **/
/**                                                      **/
/**  _____Data Retrieval Status                          **/
/** |                                                    **/
/** |_____ID Status                                      **/
/** ||                                                   **/
/** ||____Previous INSTDATA state                        **/
/** |||                                                  **/
/** |||___Action Taken                                   **/
/** ||||                                                 **/
/** 0...- Data retrieval worked                          **/
/** 1...- No such ID                                     **/
/** 2...- Not authorized for this ID                     **/
/** 4...- TSS retrieval error                            **/
/** 8...- Unknown invocation code                        **/
/**                                                      **/
/** .0..- ID has no unusual attributes                   **/
/** .1..- ID is currently Suspended                      **/
/** .2..- ID is currently Asuspended                     **/
/** .4..- ID is currently Expired **future enhancement** **/
/** .8..- ID has special attributes                      **/
/**                                                      **/
/** ..0.- Instdata had valid data                        **/
/** ..1.- Instdata had no previous instdata              **/
/** ..2.- Instdata had special code                      **/
/** ..4.- Instdata had invalid data                      **/
/** ..8.- Instdata had pending suspend                   **/
/**                                                      **/
/** ...0- Instdata updated                               **/
/** ...1- Instdata provided enum invalid                 **/
/** ...2- Not used                                       **/
/** ...4- Instdata not updated due to data retreival     **/
/**       Failure                                        **/
/** ...8- Instdata not updated due to failed TSS command **/
/**                                                      **/
/**                                                      **/
/**********************************************************/
/** Current fields for instdata code                     **/
/**                                                      **/
/** Initial    - Value created by the TxxIDAT routine at **/
/**              addition time                           **/
/**                                                      **/
/** Replace    - Value updated by the TxxIDAT routine at **/
/**              request of administrator                **/
/**                                                      **/
/** Tosuspend  - Value set by automatic process,         **/
/**              indicates the ID is to be suspended     **/
/**              the next time the auto process is run.  **/
/**                                                      **/
/** Suspend    - Value set by automatic process,         **/
/**              indicates the ID was      suspended     **/
/**              by the automatic process.               **/
/**                                                      **/
/** Asuspend   - Value set by txxIDAT as a result of     **/
/**              an administrator request.               **/
/**                                                      **/
/** Reset      - Value was reset as result of an         **/
/**              administrator request.                  **/
/**                                                      **/
/** SYSTEMS    - A SPECIAL BYPASS VALUE NOT TO BE UPDATED**/
/**                                                      **/
/** CONSULT    - A SPECIAL BYPASS VALUE NOT TO BE UPDATED**/
/**                                                      **/
/**                                                      **/
/**                                                      **/
/**----------------REQUIREMENTS--------------------------**/
/** CAN RUN STANDALONE : YES                             **/
/** ISPF ENVIRONMENT   : YES                             **/
/** EXECS CALLED WITHIN THIS EXEC : %T80GDAT             **/
/**********************************************************/
good_msg = "Completed successfully. DRC is:"
warn_msg = "Completed with warning. DRC is:"
fail_msg = "Update Failed. DRC is:"
new_trail = ""
SPECIAL.SYSTEMS = "YES"
SPECIAL.CONSULT = "YES"
SPECIAL.BYPASS  = "YES"
address ispexec vget idat
/* IDAT = "'SYS4.SPI.IDATPARM(GOODIDAT)'"  */
"ALLOC DDN(IDATparm) DSN("idat") SHR REUS"
"EXECIO * DISKR IDATPARM ( FINIS STEM HOLD.)"
"FREE DDN(IDATPARM)"
CODE. = "$$BADCODE$"
Q = TCODE("SUSPEND","ASUSPEND")
Q = TCODE("INSTDATA","REPLACE")
Q = TCODE("LANID","REPLAN")
Q = TCODE("UNSUSPEND","RESET")
Q = TCODE("ADD","INITIAL")
/* the gcode routine defines a code as valid */
/* the tcode routine defines a translate code */
/*************************************************************/
/* Below we map an invocation value to an output value to be */
/* placed into INSTDATA.                                     */
/* All output codes below should be defined as valid codes   */
/* with the gcode routine earlier.                           */
/*************************************************************/
do w = 1 to hold.0
  line = substr(hold.w,1,80)
  w1 = strip(word(line,1))
  w2 = strip(word(line,2))
  Q = GCODE(w2) /*define word2 as a valid non numerical value */
  if w1 /= "." then
    Q = TCODE(w1,w2) /* define invocation/resultant values */
end
Q = GCODE("INITIAL")
Q = GCODE("CONSULT")
Q = GCODE("SYSTEMS")
Q = GCODE("REPLACE")
Q = GCODE("TOSUSPEND")
Q = GCODE("SUSPEND")
Q = GCODE("ASUSPEND")
Q = GCODE("RESET")
outcode = 0
ARG ACID function newidata
function = strip(function)
say "T80IDAT invoked with :" function newidata
/************************************************************/
/** Lets get all the ACID data we will need                **/
/************************************************************/
ADDRESS tso "%T80GDAT " ACID " INSTDATA INSTDATA"
ADDRESS ISPEXEC "vget secrc profile"
say "gdat idata is :" secrc
current_idata = secrc
ADDRESS tso "%T80GDAT " ACID " ATTRIBUTES BASIC"
ADDRESS ISPEXEC "vget secrc profile"
say "gdat attr is :" secrc
IF SECRC = "$NOTFOUND" THEN SECRC = " "
current_attr = secrc
/************************************************************/
/**                                                        **/
/************************************************************/
/************************************************************/
/** lets get 1st byte of Detailed Return Code  DRC         **/
/************************************************************/
outcode = outcode + acode(current_attr)
new_code = code.function
/************************************************************/
/** lets get 2nd byte of DRC                               **/
/************************************************************/
say "T80IDAT: current Idata:" current_idata
if current_idata = "$BADTSS" then outcode = outcode + 4000
if current_idata = "$BADAUTH" then outcode = outcode + 2000
if current_idata = "$BADACID" then outcode = outcode + 1000
if current_idata = "$BADACID" then current_idata = " "
if New_code = "$$BADCODE$" then outcode = outcode + 8000
/************************************************************/
/** lets get 3rd byte of DRC                               **/
/************************************************************/
outcode = outcode + icode(current_idata)
current_enum = word(current_idata,1)
new_enum = current_enum
current_code = word(current_idata,2)
new_code = current_code
current_trail = substr(current_idata                                ,21)
new_trail = current_trail
Select
  when function= "LANID" then do
    new_enum  = current_enum
    new_trail = newidata
    new_code  = code.function
  end
  when function= "UNSUSPEND" then do
    new_enum  = current_enum
    new_trail = current_trail
    new_code  = code.function
  end
  when function= "ADD" then do
    new_enum  = substr(newidata,1,10)
    new_code  = code.function
  end
  when function= "SUSPEND" then do
    new_enum  = current_enum
    new_code  = code.function
  end
  when function= "INSTDATA" then do
    new_enum  = substr(newidata                 ,1,10)
    new_code  = code.function
  end
  otherwise secrc = "Failed. Unmapped invocation code" function
            address ispexec "vput secrc profile"
            say secrc
End
if special.current_code = "YES" then new_code = current_code
if special.current_code = "YES" then new_code = current_code
say "T80IDAT: back from GDAT with:" secrc
say "  Current enum :" current_enum
say "  Current code :" current_code
say "  Current trail:" current_trail
say "****************"
say "  New enum :" new_enum
say "  New code :" new_code
say "  New trail:" new_trail
/************************************************************/
/** lets get 4th byte of DRC                               **/
/************************************************************/
new_enum = substr(new_enum                 ,1,10)
new_code = substr(new_code                 ,1,10)
new_idata = new_enum||new_code||new_trail
if new_enum > 99999 then outcode = outcode + 1
if new_enum < 0 then outcode = outcode + 1
/************************************************************/
/** A code > 1000 indicates a data get error from GDAT     **/
/************************************************************/
secrc = good_msg outcode
if outcode < 1000 then do
  say "TSS REP("acid") instdata('"new_idata"')"
  tss_rcode = rc
  address tso
  "TSS REP("acid") instdata('"new_idata"')"
end
else do
  outcode = outcode + 4
  secrc = fail_msg outcode
end
if tss_rcode > 0 then do
  outcode = outcode + 8
  secrc = fail_msg outcode
end
say "T80IDAT invoked:" newidata function
say "  DRC is " outcode
if outcode /10 <> outcode%10 then do
  remain = outcode//10
  if remain < 6 then secrc = warn_msg outcode
end
say "/**  Detailed return code:                               **/"
say "/**                                                      **/"
say "/**  _____Data Retrieval Status                          **/"
say "/** |                                                    **/"
say "/** |_____ID Status                                      **/"
say "/** ||                                                   **/"
say "/** ||____Previous INSTDATA state                        **/"
say "/** |||                                                  **/"
say "/** |||___Action Taken                                   **/"
say "/** ||||                                                 **/"
say "/** 0...- Data retrieval worked                          **/"
say "/** 1...- No such ID                                     **/"
say "/** 2...- Not authorized for this ID                     **/"
say "/** 4...- TSS retrieval error                            **/"
say "/** 8...- Unknown invocation code                        **/"
say "/**                                                      **/"
say "/** .0..- ID has no unusual attributes                   **/"
say "/** .1..- ID is currently Suspended                      **/"
say "/** .2..- ID is currently Asuspended                     **/"
say "/** .4..- ID is currently Expired                        **/"
say "/** .8..- ID has special attributes                      **/"
say "/**                                                      **/"
say "/** ..0.- Instdata had valid data                        **/"
say "/** ..1.- Instdata had no previous instdata              **/"
say "/** ..2.- Instdata had special code                      **/"
say "/** ..4.- Instdata had invalid data                      **/"
say "/** ..8.- Instdata had pending suspend                   **/"
say "/**                                                      **/"
say "/** ...0- Instdata updated                               **/"
say "/** ...1- Instdata provided enum invalid                 **/"
say "/** ...2- Not used                                       **/"
say "/** ...4- Not used                                       **/"
say "/** ...6- Instdata not updated due to data retreival     **/"
say "/**       Failure                                        **/"
say "/** ...8- Instdata not updated due to failed TSS command **/"
ADDRESS ISPEXEC "vput secrc profile"
exit outcode
/***************************/
gcode: nop
arg indat
goodcode.indat = "YES"
return 0
/***************************/
tcode: nop
indat = arg(1)
indat2 = arg(2)
code.indat = indat2
return 0
/***************************/
acode: nop
arg indat
if index(indat,"SUSPEND") > 0 then outcode = outcode + 100
if index(indat,"ASUSPEND") >0  then outcode = 200
if index(indat,"CONSOLE") > 0 then outcode = outcode + 800
if index(indat,"NO") > 0 then outcode = outcode + 800
return outcode
/***************************/
icode: nop
arg idat
say "icode invoked with:" idat
outcode = 0
c_enum = word(idat,1)
c_code = word(idat,2)
c_trail = substr(idat                                ,21)
if (datatype(strip(c_enum)) /= "NUM") & (idat /= " " ) then
  outcode = outcode + 40
if idat = " " then outcode = outcode + 10
if idat = "TOSUSPEND" then outcode = outcode + 80
if special.c_code = "YES" then outcode = outcode + 20
return outcode
