/** REXX                                                 **/
/**********************************************************/
/** Changed command load code to support usercmd table   **/
/**********************************************************/
/** Documentation of messages                            **/
/**********************************************************/
/** LOG function added                                   **/
/**********************************************************/
/** ADDED WRITEDEBUG SUPPORT FOR DYNAM COMMANDS          **/
/**********************************************************/
/** ADDED TEMP/PERM PARM TO TABLE DEFINITION ROUTINE     **/
/**********************************************************/
/** ADDED POPUP MENU OPTIONS TO THE SYSTEM               **/
/**********************************************************/
/** REWRITE TO USE ISPF TABLES FOR SCREEN AND CMDS       **/
/**********************************************************/
/** THE MAIN DRIVER ROUTINE OF THE ENTIRE LOCAL PANEL    **/
/** SYSTEM. IT IS QUITE IN DEPTH SO I AINT GONNA SPLAIN  **/
/** IT.    DAVE 9 MAY 95                                 **/
/**********************************************************/
/**********************************************************/
/** EXEC NAME        : TSSUT                             **/
/** LAST MODIFIED    : 23 Sep  2007                      **/
/**----------------INPUT REQUIRED -----------------------**/
/** PASSED ARGS        VALID VALUES                      **/
/** ANY VARIABLES CREATED IN TSSINI OR ISPF ARE AVAILABLE**/
/** TO ME HERE. ALTHOUGH THIS EXEC EXPECTS NO ARGS PER SE**/
/** ISPF VGETS - A TON OF THEM                           **/
/**                                                      **/
/**----------------OUTPUT PRODUCED-----------------------**/
/** VALID CONDITION CODES - 00                           **/
/** ISPF VARIABLES        - NONE.                        **/
/**----------------REQUIREMENTS--------------------------**/
/** CAN RUN STANDALONE : NO                              **/
/** ISPF ENVIRONMENT   : YES                             **/
/** EXECS CALLED WITHIN THIS EXEC : A TON OF THEM        **/
/**                                                      **/
/**********************************************************/
SIGNAL OFF ERROR
arg sample
if sample = "SAMPLE" then do
  sample = "YES"
  address ispexec "VPUT SAMPLE PROFILE"
end
address ispexec "VPUT SAMPLE PROFILE"
PARSE VERSION V .
IF LEFT(V,5) = "REXXC" THEN COMPILED = "YES"
BEGIN_CPU = SYSVAR(SYSCPU)
ADDRESS ISPEXEC "VGET ZSYSID"
SYSID = ZSYSID
SPI_VERSION = 23SEP2007
ADDRESS ISPEXEC
PR = PROMPT("OFF")
TVERMSG = "WARNING: YOU HAVE OVERRIDDEN ENVIRONMENTAL PARMS."
SYSUID = SYSVAR(SYSUID)
MSG2 = " "
DATA = " "
DATA2 = " "
ROW =
INT.0 = 0
BOOK= " "
CLEARMSG = "YES"
RELOAD = "BOTH"
REINIT: NOP
panel_depth = 0
authcode = 0
command_stack = ""
ADDRESS TSO "%TSSVERS" /* FIND OUT WHAT TOP SECRET VERSION IS RUNNIN*/
ADDRESS TSO "%TSSINI" SYSUID /* SET MY VARIABLES FOR ME */
IF RC = 24 THEN  EXIT 00     /* TSSINI DIED ! */
CALL ON ERROR NAME NEWINI
" ISPEXEC VGET ACID            PROFILE "
" ISPEXEC VGET AUTHNUM         PROFILE "
/********************************************/
/* " ISPEXEC VGET AUTHCODE        PROFILE " */
/* dont do authcode checking any longer     */
/********************************************/
" ISPEXEC VGET AUTOINIT        PROFILE "
" ISPEXEC VGET CHKDSN          PROFILE "
" ISPEXEC VGET CMDPRE          PROFILE "
" ISPEXEC VGET CMDTABLE        PROFILE "
" ISPEXEC VGET DDS1            PROFILE "
" ISPEXEC VGET DDS2            PROFILE "
" ISPEXEC VGET DDS3            PROFILE "
" ISPEXEC VGET DDS4            PROFILE "
" ISPEXEC VGET DDS5            PROFILE "
" ISPEXEC VGET DDS6            PROFILE "
" ISPEXEC VGET DEF             PROFILE "
" ISPEXEC VGET DSBACK          PROFILE "
" ISPEXEC VGET DS1             PROFILE "
" ISPEXEC VGET DS2             PROFILE "
" ISPEXEC VGET DS3             PROFILE "
" ISPEXEC VGET DS4             PROFILE "
" ISPEXEC VGET DS5             PROFILE "
" ISPEXEC VGET DS6             PROFILE "
" ISPEXEC VGET JESNODE         PROFILE "
" ISPEXEC VGET LOGDSN          PROFILE "
" ISPEXEC VGET LOGFAIL         PROFILE "
" ISPEXEC VGET MSG2            PROFILE "
" ISPEXEC VGET NEWPASS         PROFILE "
" ISPEXEC VGET PANEL           PROFILE "
" ISPEXEC VGET SCRPRE          PROFILE "
" ISPEXEC VGET SCRLOAD         PROFILE "
" ISPEXEC VGET SCRTABLE        PROFILE "
" ISPEXEC VGET SECRC           PROFILE "
" ISPEXEC VGET SRCCMD          PROFILE "
" ISPEXEC VGET USERCMD         PROFILE "
" ISPEXEC VGET SRCSCR          PROFILE "
" ISPEXEC VGET SYSTEM          PROFILE "
" ISPEXEC VGET TABLEDSN        PROFILE "
" ISPEXEC VGET TABLEOPT        PROFILE "
" ISPEXEC VGET TRAPNUM         PROFILE "
" ISPEXEC VGET TSSVERS         PROFILE "
" ISPEXEC VGET TVER            PROFILE "
" ISPEXEC VGET ZAPPLID                 "
" ISPEXEC VGET ZSCREEND                "
" ISPEXEC VPUT SECRC           PROFILE "
" ISPEXEC VPUT CLEARMSG        PROFILE "
call off error
" ISPEXEC VGET VARLIST         PROFILE "
" ISPEXEC Verase opt           PROFILE "
if scrload = "NO" then reload = "COMMAND"
DO CNT = 1 TO WORDS(VARLIST)
  VNAME = WORD(VARLIST,CNT)
  ADDRESS ISPEXEC "Vget " VNAME "PROFILE "
  IF RC <> 0 THEN DO
    say "TSA026W: Vget for  variable " vname " failed in tssut"
    say "TSA026W: Variable VARLIST may be improperly set."
  END
END
MSG= "GENERAL :"    SECRC
if substr(strip(secrc),1,3) = "TSA" then msg = secrc
SECRC = " "
    /*******************************************************/
    /* A $$ INDICATES THE MSG WAS SET BY TSSINI SO KEEP IT */
    /*******************************************************/
log_check =  sysdsn(logdsn)
/***********************************************************/
/** AUTHORIZATION CHECKING.... NEVER CHANGE THIS CODE  *****/
/***********************************************************/
codes = words(authcode)
if codes > 20 then do
  say "TSA027W: Too many authorization codes provided. aborting "
end
parse var authcode w.1 w.2 w.3 w.4 w.5 w.6 w.7 w.8 w.9 w.10 w.11 w.12,
          w.13 w.14 w.15 w.16 w.17 w.18 w.19 w.20 end1
i_digits = digits()
gooddate = "invalid"
/* MSN UPDATE HERE  signal doneauth  */
signal doneauth
numeric digits 60
/******************************/
psa = ptr(520)
psa = c2d(psa)  /* we got back a character value from function */
psa = psa + 6   /* it just got changed to a decimal value */
psa = d2x(psa)  /* we change it back to a hex value */
cpu = storage(psa,6) /* give the storage function the address in hex */
cpu = substr(cpu,3)
anycpu = 99999
/******************************/
gocode: nop
today = date(s)
do x = 1 to codes
  acode = w.x
  tempdate = ((1000000000000 - acode) + (cpu * cpu)) / cpu
  datechek = format(tempdate,60,0)
  t_date = ((1000000000000 - acode) + (anycpu * anycpu)) / anycpu
  trial_check = format(t_date,60,0)
  if t_date = trial_check then do
    INT.0 = INT.0 + 1
    HOLDTEMP = INT.0
    INT.HOLDTEMP = "TSA028I: Trial code found for processor:" acode
    INT.0 = INT.0 + 1
    HOLDTEMP = INT.0
    INT.HOLDTEMP = "You are authorized to run the product until" t_date
    trial = "yes"
    gooddate = t_date
  end
  if trial = "yes" then leave
  if tempdate /= datechek then do
    INT.0 = INT.0 + 1
    HOLDTEMP = INT.0
    INT.HOLDTEMP = "TSA029I: Skipping code, wrong processor:" acode
  end
  if tempdate /= datechek then iterate x
  INT.0 = INT.0 + 1
  HOLDTEMP = INT.0
  INT.HOLDTEMP = "TSA029I: Authorization valid until" tempdate
  INT.0 = INT.0 + 1
  HOLDTEMP = INT.0
  INT.HOLDTEMP = "With authcode :" acode
  gooddate = tempdate
end
if gooddate = "invalid" then do
  say "TSA031E: "
  say "***********************************************"
  say "**No valid auth codes found for processor" cpu
  say "***********************************************"
  say authcode
  Say "Please provide valid AUTHCODE for processor " cpu
  Say "or hit PA1 to exit program "
  parse pull acode
  codes = words(acode)
  w.1 = acode
  if w.1 = "quit" then exit 0
  signal gocode
end
/* finalcode = 1000000000000 - ((cpu * gooddate) - (cpu * cpu))  */
timeleft = gooddate - today
if timeleft < 200 then do
  say "************************"
  say " Your current code is soon to expire."
  MSG2 = "$$ Authorization is soon to expire, on "gooddate
  ADDRESS ISPEXEC "VPUT MSG2 PROFILE"
  say "************************"
end
if today > gooddate then do
  say "************************"
  say "expired product         "
  say "************************"
  exit 16
end
numeric digits i_digits
/* */
IF DATATYPE(INT.0) /= "NUM" THEN INT.0 = 0
INT.0 = INT.0 + 1
HOLDTEMP = INT.0
If compiled = "YES" then
  INT.HOLDTEMP = "Compiled version running, " spi_version
/***********************************************************/
/** AUTHORIZATION CHECKING END NEVER CHANGE THIS CODE  *****/
/***********************************************************/
doneauth: nop
IF WORD(MSG2,1) \= "$$" THEN DO
  MSG2 = " "
  " ISPEXEC VPUT MSG2 PROFILE "
END
IF NEEDINIT = "YES" THEN DO
  NEEDINIT = "NO"
  IF REINIT1 = "YES" THEN DO    /* DEEP TROUBLE ENDLESSLOOP */
    MSG2 = "TSSUT/TSSINI SYNC ERROR. FATAL ERROR." SIGL
    CLEARMSG = "NO"
  END
  ELSE DO
    REINIT1 = "YES" /* INDICATE WE HAVE CALLED TSSINI FROM HERE*/
    SAY "SIGNALLING REINIT"
    OTT = OUTTRAP("OFF")  /* NOTHING */
    SIGNAL REINIT
  END
END
TABLES: NOP
IF DATATYPE(INT.0) /= "NUM" THEN INT.0 = 0
IF TABLEOPT = "TEMP" THEN DO
  /* SAY "BUILDING TEMPORARY TABLES FOR THIS SESSION " */
  INT.0 = INT.0 + 1
  HOLDTEMP = INT.0
  int.holdtemp = "TSA101D: TSSUT table load commencing. parm is " reload
  OTT = OUTTRAP(ON.,100)  /* TRAPALL */
  IF (RELOAD = "BOTH") | (RELOAD = "SCREEN") THEN
  ADDRESS TSO "%TBMSCR" SRCSCR "." SCRTABLE AUTHNUM "NO"
  IF (RELOAD = "BOTH") | (RELOAD = "COMMAND") THEN
  ADDRESS TSO "%TBMCMD" USERCMD "." CMDTABLE AUTHNUM "NO"
  /*****************************************************/
  /**THE ABOVE ROUTINES BUILD TABLES AND LEAVE THEM   **/
  /** OPEN FOR USE BY THIS EXEC                       **/
  /*****************************************************/
  RELOAD = "BOTH"
  INT.0 = INT.0 + 1
  HOLDTEMP = INT.0
  int.holdtemp = "TSA101D: Table load complete. debug msgs below"
  OTT = OUTTRAP("OFF")  /* NOTHING */
END
IF TABLEOPT /= "TEMP" THEN DO
  OTT = OUTTRAP(ON.,100)  /* TRAPALL */
  /*****************************************************/
  /**THE ABOVE OPTION INDICATES WE ARE USING PERMANENT**/
  /** TABLES THAT ARE PREDEFINED SO LETS OPEN THEM    **/
  /*****************************************************/
  CALL OFF ERROR
  SIGNAL OFF ERROR
  CALL ON ERROR NAME NOTABLE
  IF (RELOAD = "BOTH") | (RELOAD = "COMMAND") THEN
  ADDRESS ISPEXEC "TBOPEN" CMDTABLE "NOWRITE"
  /*IF STABLE_RC = 12 THEN */
  IF (RELOAD = "BOTH") | (RELOAD = "SCREEN") THEN
  ADDRESS ISPEXEC "TBOPEN" SCRTABLE "NOWRITE"
  TRACE OFF
END
CALL ON ERROR NAME SHUCKS
/*PANEL  = "SPIUTIL"                     */
/*ADDRESS ISPEXEC "VPUT PANEL PROFILE"   */
IF PANEL /= "SPIUTIL" THEN DO
  INT.0 = INT.0 + 1
  HOLDTEMP = INT.0
  INT.HOLDTEMP = "**Table display is disabled do to custom panel."
  PANEL_ENV = "BASIC"
END
DEFPNL = PANEL
dp.0 = defpnl
OLDTVER =  TVER
SCRNUM = ZSCREEND - 7
WDS. = " "
UNIT =  TSOUNIT
/******************************************************************/
/*  NOW I HAVE RETRIEVED ALL VARIABLES   BY TSSINI    DIR 9 SEP 92*/
/*  I WILL NOW CHECK FOR DSN VALIDITY....DIR  14 SEP 92           */
/******************************************************************/
DDS.1 = DDS1
DDS.2 = DDS2
DDS.3 = DDS3
DDS.4 = DDS4
DDS.5 = DDS5
DDS.6 = DDS6
IF CHKDSN < > "YES" THEN SIGNAL DSNDONE
DO TT = 1 TO 6
  XX = "DS"TT
  DSNTEMP = VALUE(XX)
  DSNMSG = SYSDSN(DSNTEMP)
  /* SAY "DSNMSG " DSNMSG "DSN= " DSNTEMP */
  IF DSNMSG = "OK" THEN ITERATE TT
  msg2 = "Work dsn(s) unavailable. some advanced functions may fail"
  /* SAY MSG2  */
  WDS.TT = "*"
  DDS.TT = DSNMSG
  IF DSNMSG = "DATASET NOT FOUND" THEN DO
    msg2 = "Work dsn(s) invalid. some advanced functions may fail"
     WDS.TT = "**"
  END
  IF WORD(MSG2,1) \= "$$" THEN ADDRESS ISPEXEC "VPUT MSG2 PROFILE"
END
DDS1 = DDS.1
DDS2 = DDS.2
DDS3 = DDS.3
DDS4 = DDS.4
DDS5 = DDS.5
DDS6 = DDS.6
WDS1 = WDS.1
WDS2 = WDS.2
WDS3 = WDS.3
WDS4 = WDS.4
WDS5 = WDS.5
WDS6 = WDS.6
DSNDONE: NOP
BOPEN = NO
CURSOR = "OPT"
SPACES = "                "
CMDNUM = 0
RCODE = 0
MENUNUM = 0
SCRARRAY.0 = 0
MODE = "ONLINE"
IF  PANEL = "" THEN  DO
  msg2 =  "TSA049E: Warning! TSSINI has failed. variables may be"
  msg2 =    msg2 "corrupted."
  PANEL = SPIUTIL
  CLEARMSG = "NO"
END
CALL OFF ERROR
SIGNAL OFF ERROR
CALL ON ERROR NAME SHUCKS
ANUM = 1
/* SAY SCRARRAY.0 AUTHNUM */
DO Q = 1 TO ANUM
  SCRARRAY.Q = OUTA.Q
END
MSG1. = ; MSG2. = ; MSG3. = ; MSG4. = ; MSG5. = ; MSG6.= ; MSG7. = ;
TEMPARRAY.0 = 0
THISREC = 1
Y = 0
X = 0
OTT = OUTTRAP(ON.,TRAPNUM) /* TRAP EVERYTHING */
SOURCE = PREDEF
if logdsn / = "NONE" then do
  initlog.0 = 3
  initlog.1 = "Log initialized for ID" sysuid
  initlog.2 = "on Date" today
  initlog.3 = "**************************"
  if log_check = "MEMBER NOT FOUND" then do
    address tso "alloc ddn(logdd) dsn("logdsn") shr reus"
    ADDRESS MVS "EXECIO * DISKW LOGDD (FINIS STEM INITLOG.)"
    address tso "free ddn(logdd)"
  end
  IF log_check  = "DATASET NOT FOUND" THEN DO
    ADDRESS TSO "ALLOC DSN("LOGDSN") UNIT("ALUNIT") NEW DDN(LOGDD)",
    "SPACE(15) CYLINDERS LRECL(80) BLKSIZE(24800) RECFM(F B) DSORG(PS)"
    ADDRESS MVS "EXECIO * DISKW LOGDD (FINIS STEM INITLOG.)"
    address tso "free ddn(logdd)"
  END
  log_check = sysdsn(logdsn)
  /*if log_check = "OK" then do                                  */
  /*  address tso "alloc ddn(logdd) dsn("logdsn") mod reus"      */
  /*end                                                          */
end
if (log_check /= "OK") & (logfail = "YES") then do
  msg2 =  "LOG Dataset is not usable, no logged functions are"
  msg2 = msg2 "available."
  clearmsg = "NO"
  address ispexec "vput msg2 profile"
  address ispexec "vput clearmsg profile"
end
/******************************************************************/
/*  THIS IS THE LASTOF THE INIT AREA. WHAT FOLLOWS IS THE LOOP.   */
/******************************************************************/
TRAP_FLAG = "YES"
DISPPNL: NOP
  RCODE = 0 /*  RESET THE LAST ERROR RETURN CODE */
  IF WORD(HOLDLINE,1) = WORD(ACID,1) THEN ACID = HOLDLINE
  IF OPT = "NIL" THEN OPT = " "
  CPUUSED = SYSVAR(SYSCPU) - BEGIN_CPU
  ADDRESS ISPEXEC  "VGET MSG2 PROFILE"
  ADDRESS ISPEXEC  "VGET PANEL PROFILE"
  ADDRESS ISPEXEC  "VGET CLEARMSG PROFILE"
  ADDRESS ISPEXEC  "VPUT CPUUSED  PROFILE"
  AUTH = AUTHNUM
  /* "TBSARG TS5USC10 NAMECOND(AUTH,LE)" */
  IF PANEL = "SPISTAT" THEN SCAN = "YES"
  IF (FNAME /= "FNAME") & (SCAN = "NO") THEN DO
    OTT = OUTTRAP(ON.,TRAPNUM) /* TRAP EVERYTHING */
    ADDRESS ISPEXEC "TBSARG "SCRTABLE" ARGLIST(FNAME)"
    CALL OFF ERROR
    "TBGET" SCRTABLE
    ADDRESS ISPEXEC "TBSKIP "SCRTABLE" NUMBER(-"scrnum")"
    CALL ON ERROR NAME SHUCKS
    /*********************************************/
    /** EACH LINE PUT ON THE SCREEN UPDATES THE **/
    /** VARIABLES SO EACH TIME WE DONT SCAN WE  **/
    /** SET THE TOP OF SCREEN VALUE TO BOTTOM   **/
    /** - 14                  DAVE              **/
    /*********************************************/
  END
  SCAN = "NO"
  PNL_DISP = "YES"
  /**************************************************************/
  /** If the below display fails due to a table not open, one  **/
  /** of two things has occurred.                              **/
  /** 1 - The panel ( spiutil ) is not available               **/
  /** 2 - The temporary table name is not available            **/
  /**     This would happen if the variable scrload is "NO"    **/
  /**     and the panel was set to spiutil. The spiutil panel  **/
  /**     requires that the screen table be loaded. An error of**/
  /**     this type is almost always the result of an error in **/
  /**     the T$$ exec                                         **/
  /**                                                          **/
  /**************************************************************/
   Select
     when (PANEL = "SPIUTIL") & (scrload = "YES") then
       "TBDISPL "SCRTABLE" PANEL("PANEL") CURSOR("CURSOR")"
     when (PANEL = "SPIUTIL") & (scrload = "NO") then do
       msg = "TSA053E: Table/screen mismatch, SPIMAIN displayed"
       panel_depth = 0
       command_stack = ""
       panel_env = "BASIC"
       prefenv = "BASIC"
       opt = ""
       panel = "SPIMAIN"
       defpnl = "SPIMAIN"
       dp.0   = "SPIMAIN"
       address ispexec "vput panel profile"
       address ispexec "vput prefenv profile"
       signal disppnl
     end
     otherwise "DISPLAY PANEL("PANEL") CURSOR("CURSOR")"
   End
   upper opt
   /*  old panel display is below
  IF (PANEL = "SPIUTIL") & (scrload = "YES") then
  "TBDISPL "SCRTABLE" PANEL("PANEL") CURSOR("CURSOR")"
  IF (PANEL /= "SPIUTIL") & (scrload = "YES") then
  ELSE "DISPLAY PANEL("PANEL") CURSOR("CURSOR")"
  */
  PNL_DISP = "NO"
  if panel = "SPIPOP" then do
  end
  SOURCE = "PREDEF"
  IF OPT = "TRACEOFF" THEN TRACE OFF
  IF OPT = "STATUS" then opt = "0"
  ACID_WORDNUM = WORDS(ACID)
  DATA_WORDNUM = WORDS(DATA)
  DATA2_WORDNUM = WORDS(DATA2)
  HOLDLINE = ACID
  "ISPEXEC VPUT ACID PROFILE"
  "ISPEXEC VPUT DATA PROFILE"
  "ISPEXEC VPUT DATA2 PROFILE"
  IF CLEARMSG = "YES"  THEN DO
    MSG2 =  " "
    ADDRESS ISPEXEC "VPUT MSG2 PROFILE"
    ADDRESS ISPEXEC "VPUT CLEARMSG PROFILE"
  END
  MSG =   " "
  SECRC=  " "
  UPPER DATA
  UPPER DATA2
  UPPER ACID
  FUNCT= "GENERAL"
  CURSOR= "OPT"
  HOLD = ACID"     "
  FIRST4 = SUBSTR(HOLD,1,4)
/***********************************************************/
/* HERE WE START THE SPECIAL ENVIRONMENT AFFECTING         */
/* OPTIONS....................DIR 19 OCT 92                */
/***********************************************************/
  IF OPT = "SCREENLOAD" THEN DO
    IF (SYSDSN("'"ACID"'")/= "OK") & (SYSDSN(ACID)/= "OK") THEN DO
      secrc = "TSA032E: Load dataset not usable, load aborted." acid
      SIGNAL GOTMSG
    END
    IF TABLEOPT /= "TEMP" THEN DO
      secrc = "TSA033E: Table format not dynamic, screenload not valid."
      SIGNAL GOTMSG
    END
    RELOAD = "SCREEN"
    "ISPEXEC TBEND "SCRTABLE
    SRCSCR = ACID
    SIGNAL TABLES
  END
  IF OPT = "COMMANDLOAD" THEN DO
    if PANEL_ENV = "BASIC"  then do
      address tso "%popexp"
      call disppop
      acid = v1 ;data = v2; data2 = v3
    end
    IF (SYSDSN("'"ACID"'")/= "OK") THEN DO
      secrc = "TSA032E: Load dataset not usable, load aborted."
      SIGNAL GOTMSG
    END
    IF TABLEOPT /= "TEMP" THEN DO
     secrc = "TSA033E: Table format not dynamic, commandload not valid."
      SIGNAL GOTMSG
    END
    RELOAD = "COMMAND"
    "ISPEXEC TBEND "CMDTABLE
    USERCMD = ACID
    " ISPEXEC VPUT USERCMD         PROFILE "
    SIGNAL TABLES
  END
  IF OPT = "FILECHECK" THEN DO
    TRAP_FLAG = "YES"
    OPT = "NIL"
    ADDRESS TSO "%FSDISP %FILECHK"
    SIGNAL NOMSG
  END
  IF OPT = "WRITEDEBUG" THEN DO
    TRAP_FLAG = "YES"
    OPT = "NIL"
    ADDRESS TSO "ALLOC DDN(OUT1) DSN("DS3") SHR REUS"
    ADDRESS MVS "EXECIO "INT.0" DISKW OUT1 ( FINIS STEM INT.)"
    ADDRESS TSO "FREE DDN(OUT1)"
    ADDRESS TSO "ALLOC DDN(OUT1) DSN("DS3") MOD"
    ADDRESS MVS "EXECIO "TRAPNUM" DISKW OUT1 ( FINIS STEM ON.)"
    ADDRESS TSO "FREE DDN(OUT1)"
    DO QW1 = 1 TO TRAPNUM; ON.QW1 = " "; END
    secrc = "TSA046I:" trapnum "lines of debug file info written to "ds3
    address tso "%rxbrowse "ds3
    SIGNAL GOTMSG
  END
  IF OPT = "WD" THEN DO
    TRAP_FLAG = "YES"
    OPT = "NIL"
    ADDRESS TSO "ALLOC DDN(OUT1) DSN("DS3") SHR REUS"
    ADDRESS MVS "EXECIO "INT.0" DISKW OUT1 ( FINIS STEM INT.)"
    ADDRESS TSO "FREE DDN(OUT1)"
    ADDRESS TSO "ALLOC DDN(OUT1) DSN("DS3") MOD"
    ADDRESS MVS "EXECIO "TRAPNUM" DISKW OUT1 ( FINIS STEM ON.)"
    ADDRESS TSO "FREE DDN(OUT1)"
    DO QW1 = 1 TO TRAPNUM; ON.QW1 = " "; END
    secrc = "TSA046I:" trapnum "lines of debug file info written to "ds3
    address tso "%rxbrowse "ds3
    SIGNAL GOTMSG
  END
  IF OPT = "TRAPOFF" THEN DO
    OTT = OUTTRAP("OFF")  /* NOTHING */
    TRAP_FLAG = "NO"
    OPT = "NIL"
    secrc = "TSA034I: All internal output will now be shown."
    SIGNAL GOTMSG
  END
  IF OPT = "TRAPSET" THEN DO
    if datatype(acid) /= "NUM" then acid = 1000
    trapnum = acid
    secrc = "TSA054I: Trapnum reset to "acid
    SIGNAL GOTMSG
  END
  IF OPT = "TRAPON" THEN TRAP_FLAG = "YES"
  IF OPT = "TRAPON" THEN DO
    TRAP_FLAG = "YES"
    secrc = "TSA035I: I am now trapping subtask created messages."
    SIGNAL GOTMSG
  END
  IF TRAP_FLAG = "YES" THEN DO
     SS = OUTTRAP(ON.,TRAPNUM)
  END
  IF TRAP_FLAG = "NO" THEN DO
     SS = OUTTRAP(OFF)
  END
  IF (OPT = "NIL") | (OPT = " " )  THEN DO
    OPT = " "
    SIGNAL DISPPNL
  END
  IF OPT = "TRAPON" THEN TRAP_FLAG = "YES"
  IF OPT = "TRAPOFF" THEN TRAP_FLAG = "NO"
  IF OPT = "TRACE" THEN TRACE R
  IF OPT = "TRACE" THEN SIGNAL REDO
  IF OPT = "TRACEOFF" THEN SIGNAL REDO
  IF OPT = "LEAVE" THEN CALL SHUCKS
  IF OPT = "END" THEN EXIT
  IF OPT = "X" THEN CALL SHUCKS
  IF OPT = "QUIT" THEN CALL SHUCKS
  IF  TVER ¬= OLDTVER THEN  DO
    MSG2 = TVERMSG
    CLEARMSG = "NO"
  END
  IF OPT = "BASIC" THEN DO
    panel_depth = 0
    command_stack = ""
    panel_env = "BASIC"
    prefenv = "BASIC"
    opt = ""
    panel = "SPIMAIN"
    defpnl = "SPIMAIN"
    dp.0   = "SPIMAIN"
    msg = "TSA518I: Mode changed due to user request."
    address ispexec "vput panel profile"
    address ispexec "vput prefenv profile"
    signal disppnl
  end
  IF OPT = "EXPERT" THEN DO
    panel_depth = 0
    command_stack = ""
    opt = ""
    PANEL_ENV = "EXPERT"
    Prefenv = "EXPERT"
    panel = "SPIUTIL"
    defpnl = "SPIUTIL"
    dp.0   = "SPIUTIL"
    msg = "TSA518I: Mode changed due to user request."
    address ispexec "vput panel profile"
    address ispexec "vput prefenv profile"
    if scrload = "NO" then do
      scrload = "YES"
      reload = "SCREEN"
      signal tables
    end
    signal disppnl
  end
  IF OPT = "REXXCMD" THEN DO
    if PANEL_ENV = "BASIC"  then do
      address tso "%popexp"
      call disppop
      acid = v1 ;data = v2; data2 = v3
    end
    IF INDEX(ACID,"SOURCELINE") = 0 THEN INTERPRET ACID
    msg = "TSA050I: REXX input interpreted successfully."
    IF INDEX(ACID,"SOURCELINE") /= 0 THEN
      msg = "TSA051W: REXXCMD invalid, input ignored."
    OPT = " "
    SIGNAL REDO
  END
  /* IF (OPT ¬= "CMDO") &  (OPT ¬= "CMDS") THEN ACID = WORD(ACID,1) */
  IF  PANELRC = 8 THEN  DO
    PANEL= DEFPNL
    ADDRESS ISPEXEC "VPUT PANEL PROFILE"
    PANELRC=0
    msg= "Function completed successfully"
    FUNCT = "GENERAL"
    OPT=  " "
    SIGNAL REDO
  END
  IF  OPT = "REINIT" THEN  DO
    INI = "NO"
    RELOAD = "BOTH"
    "ISPEXEC TBEND "CMDTABLE
    if scrload = "YES" then
      "ISPEXEC TBEND "SCRTABLE
    "ISPEXEC VPUT INI PROFILE"
    SIGNAL REINIT
  END
  /************************************************/
  /**--------DYNAMIC COMMAND AREA----------------**/
  /**  OW LETS PROCESS THE USERS CMDLIST DSN     **/
  /**--------DYNAMIC COMMAND AREA----------------**/
  /************************************************/
  ADDRESS ISPEXEC "TBTOP "CMDTABLE
  ADDRESS ISPEXEC "TBVCLEAR "CMDTABLE
  CMDNAME = OPT
  if datatype(opt) = "NUM" then do
    /* we must translate the numeric command to the stacked command */
    /* format that is used in the input parm file.. 21 Oct 99       */
    numeric_flag = "YES"
    hold = command_stack||"."OPT
    if panel_depth = 0 then hold = opt
    cmdname = HOLD
    /* say "Reformatted command is now" cmdname */
  end
  cmdlook: nop
  ADDRESS ISPEXEC "VPUT CMDNAME"
  ADDRESS ISPEXEC "TBSARG "CMDTABLE "ARGLIST(CMDNAME)"
  CALL OFF ERROR
  signal off error
  OTT = OUTTRAP(ON.,trapnum)  /* TRAPALL */
  IF TRAP_FLAG = "NO" THEN
    OTT = OUTTRAP("OFF")  /* TRAPNONE */
  "TBGET" CMDTABLE
  CMD_RC = RC
  CALL ON ERROR NAME SHUCKS
  IF CMD_RC = 0 THEN DO
    if numeric_flag = "YES" then do
      numeric_flag = "NO"
      Panel_depth = Panel_depth + 1
      command_stack = command_stack||"."OPT
      if panel_depth = 1 then command_stack = opt
      OPT = ""
    end
    ck1 = index(vars,"ACID")
    ck2 = index(vars,"DATA ")
    ck3 = index(vars,"DATA2 ")
    ck4 = ck1 + ck2 + ck3
    IF SUBSTR(PGMNAME,1,5) = "TVER." THEN
      PGMNAME= "%"||TVER||SUBSTR(PGMNAME,6)  /* VER 51 */
    if (panel_env = "BASIC") & (ck4 /= 0) &,
      (substr(pgmname,1,1) /= "/") then do
  /*  secrc="TSA516E: Expert function is unavailable in basic mode."*/
      pgmname = "/EXP."pgmname
    /*SIGNAL GOTMSG   */
    end
    INT.0 = 0
    IF TRAP_FLAG = "NO" THEN
      SAY PGMNAME MSGOPT DATACK DATA2CK AUTH TRAPOPT BATCHOPT VARS
    IF TRAP_FLAG = "YES" THEN DO
      IF DATATYPE(INT.0) /= "NUM" THEN INT.0 = 0
      INT.0 = INT.0 + 1
      HOLDTEMP = INT.0
      INT.HOLDTEMP = "*********************************************"
      HOLDTEMP = HOLDTEMP + 1
      INT.HOLDTEMP = "***DYNAMIC ROUTINE ENTERED MATCH IS BELOW: **"
      HOLDTEMP = HOLDTEMP + 1
      INT.HOLDTEMP = "*********************************************"
      HOLDTEMP = HOLDTEMP + 1
      INT.HOLDTEMP = "PGM     MSG  DATA DATA2 AUTH TRAP BATCH VARS "
      HOLDTEMP = HOLDTEMP + 1
      INT.HOLDTEMP = PGMNAME MSGOPT"   " DATACK"    " DATA2CK"    ",
      AUTH"  " TRAPOPT"   " BATCHOPT "    "VARS
      INT.0 = HOLDTEMP
    END
    If substr(pgmname,1,1) = "/" then do
      HOLDTEMP = HOLDTEMP + 1
      INT.HOLDTEMP = "/ control indicator found found."
      INT.0 = HOLDTEMP
      if substr(pgmname,2) = "SCREEN" then do
        panel = strip(msgopt)
        if panel = "SPI.SYSID." then panel = "SPIL"ZSYSID
        address ispexec "vput panel profile"
        msg = ""
        address ispexec "vput msg profile"
        dp.panel_depth = panel
        panel_var = "dpanel."cmdname
        /* say panel_var "= panel"  */
        interpret panel_var "= panel"
        /*  say "Displaying panel "panel */
        signal disppnl
      end
      temp_cmd = "POP"||substr(pgmname,2,3)
      INT.0 = INT.0 + 1
      HOLDTEMP = INT.0
      int.holdtemp = "TSA101D: Calling prepatory command" temp_cmd
      address ispexec "vput opt profile"
      address tso "%"temp_cmd
      pgmname = substr(pgmname,6)
      IF SUBSTR(PGMNAME,1,5) = "TVER." THEN
        PGMNAME= "%"||TVER||SUBSTR(PGMNAME,6)  /* VER 51 */
      HOLDTEMP = HOLDTEMP + 1
      INT.HOLDTEMP = "PGMNAME is now:" pgmname
      call disppop
      /***********************************/
      /** if the temp_cmd is popexp then**/
      /** the user is in basic mode and **/
      /** issuing expert commands       **/
      /** not the best but well try     **/
      /***********************************/
      if temp_cmd = "POPEXP" then do
        acid = v1 ;data = v2; data2 = v3
      /*say "ACID DATA DATA2"
        say  ACID DATA DATA2  */
      end
      if pop_rc /= 0 then do
      trace off
        secrc = "TSA517I: Popup panel aborted, function stopped."
        signal gotmsg
      end
      INT.0 = HOLDTEMP
    end
    ADDRESS ISPEXEC "VPUT MODE  PROFILE"
    IF TRAP_FLAG = "NO" THEN
      say "TSA101D: Dynamic routine finds command match on record " q
    FUNCT = OPT
    SOURCE = "DYNAM"
    IF AUTH > AUTHNUM THEN DO
      secrc = "TSA036I: Failed. requires authority level" auth"."
      secrc = secrc " your level is" authnum
      SIGNAL GOTMSG
    END
    IF (trapopt = "LOG") & (logfail = "YES"),
    & (log_check /= "OK") then do
      secrc = "TSA037E: Aborted."
      secrc = secrc "Log is unavailable yet function requires log."
      SIGNAL GOTMSG
    END
    /*********************/
    /** CHECK DATA TYPE **/
    /*********************/
    IF (DATACK = "NUM" ) & (DATATYPE(DATA) ¬= "NUM") THEN DO
      MSG = "TSA038E: "
      msg = msg "A numeric data field is required for this function"
      SIGNAL REDO
    END
/*  IF (ACID = " " ) & (panel_env = "EXPERT") then do
      MSG = "TSA038E: "
      msg = msg "An ACID field is required for this function"
      SIGNAL REDO
    END */
    IF (DATACK = "CHAR" ) & (DATATYPE(DATA) ¬= "CHAR") THEN DO
      MSG = "TSA038E: "
      msg= msg "A character data field is required for this function"
      SIGNAL REDO
    END
    /***********************************************************/
    /* MSN 06/01/95 - OPTC MEANS FIELD IS OPTIONAL BUT IF IT   */
    /*    IS CODED, THEN IT MUST BE CHARACTER FORMAT           */
    /***********************************************************/
    IF (DATACK = "OPTC" ) & (DATATYPE(DATA) ¬= "CHAR") THEN DO
      MSG = "TSA038E: "
      msg = msg "Aborted, if provided the data field must be character."
      SIGNAL REDO
    END
    IF DATACK = "PAD."  THEN DO
      DATA = TRANSLATE(DATA,"."," ")
      SAY "DYNAM: BLANKS TRANSLATED TO DOTS IN DATA."
      SAY "DYNAM: RESULT OF TRANS:" DATA
    END
    IF (DATACK = "OPTN" ),
    & (DATATYPE(DATA) ¬= "NUM") THEN DO
      MSG = "TSA038E:"
      msg = msg "Aborted, if provided the data field must be numeric."
      SIGNAL REDO
    END
    IF ( (DATACK = 1 ) | (DATACK = "CHAR" ) ) & (DATA = " ") THEN DO
      MSG = "TSA038E:"
      msg = msg "The data field is required for this function"
      SIGNAL REDO
    END
    IF (DATA2CK = "OPTN" ),
    & ((DATATYPE(DATA2) ¬= "NUM") & length(strip(data2)) > 0) THEN DO
      MSG = "TSA038E:"
      msg = msg "Aborted, if provided the data2 field must be numeric."
      SIGNAL REDO
    END
    IF (DATA2CK = "NUM" ) & (DATATYPE(DATA2) ¬= "NUM") THEN DO
      MSG = "TSA038E:"
      msg = msg "A numeric data2 field is required for this function"
      SIGNAL REDO
    END
    IF (DATA2CK = "CHAR" ) & (DATATYPE(DATA2) ¬= "CHAR") THEN DO
      MSG = "TSA038E:"
      msg = msg "A character data2 field is required for this function"
      SIGNAL REDO
    END
    IF ( (DATA2CK = 1 ) | (DATA2CK = "CHAR" ) ) & (DATA2= " ") THEN DO
      MSG = "TSA038E:"
      msg = msg "The data2 field is required for this function"
      SIGNAL REDO
    END
    /******************************/
    /** FUTURE CMD STACKING DO   **/
    /** GOES HERE.               **/
    /******************************/
    BATCH_VARS = " "
    PARSE VAR VARS W.1 W.2 W.3 W.4 W.5 W.6 W.7 W.8 W.9 W.10 W.11,
          W.12 W.13 W.14 W.15 W.16 W.17 W.18 W.19 W.20
    STOP =  WORDS(VARS)
    IF STOP > 20 THEN
      MSG2 = "DYNAM ROUTINE OVERFLOW MORE THAN 20 VARIABLES IN ARGS"
    /******************************/
    /** LETS SEPERATE THE VARS   **/
    /** FROM THE LITERALS IN THE **/
    /** COMMAND STREAM.          **/
    /** LITERALS HAVE A _ IN.    **/
    /******************************/
    DO T1 = 1 TO STOP
      STRIP = "NO"
      IF (INDEX(W.T1,"$") = 1) & (INDEX(W.T1,".") = 3) THEN DO
        holdit1 = substr(w.t1,4)
        wnum = substr(w.t1,2,1)
        holdit2 = word(value(holdit1),wnum)
        INT.0 = INT.0 + 1
        HOLDTEMP = INT.0
        INT.HOLDTEMP = "TSA101D: Dynam replacing "w.t1
        INT.HOLDTEMP = int.holdtemp "with constant" holdit2
        INT.0 = HOLDTEMP
        w.t1 = "_"holdit2
      END
      IF (INDEX(W.T1,"<") ¬= 0) THEN DO
        W.T1 = TRANSLATE(W.T1,"","<") /* REPLACE _ WITH NULL */
        W.T1 = STRIP(W.T1)
        STRIP = "YES"
        IF TRAP_FLAG = "NO" THEN
          SAY "DYNAM: DETECTED A NO SPACE VAR"
        IF TRAP_FLAG = "YES" THEN DO
          IF DATATYPE(INT.0) /= "NUM" THEN INT.0 = 0
          INT.0 = INT.0 + 1
          HOLDTEMP = INT.0
          int.holdtemp = "TSA101D: Dynam detected a no space var"
          INT.0 = HOLDTEMP
        END
      END
      IF (INDEX(W.T1,"_") ¬= 0) | (DATATYPE(W.T1) = "NUM") THEN
        VAL = TRANSLATE(W.T1," ","_") /* REPLACE _ WITH SPACES */
      ELSE VAL = VALUE(W.T1)
      VAL = STRIP(VAL)
      IF STRIP = "NO" THEN
        BATCH_VARS = BATCH_VARS VAL
      ELSE
        BATCH_VARS = BATCH_VARS||VAL
      IF TRAP_FLAG = "NO" THEN
        SAY "VALUE OF VAR " W.T1 "IS " VAL
      IF TRAP_FLAG = "YES" THEN DO
        IF DATATYPE(INT.0) /= "NUM" THEN INT.0 = 0
        INT.0 = INT.0 + 1
        HOLDTEMP = INT.0
        int.holdtemp = "TSA101D: Value of var " w.t1 "is " val
        INT.0 = HOLDTEMP
      END
    END
    IF VARS = 0 THEN BATCH_VARS = " "
    /*******************************************************/
    /* Discovered a problem when a non isp command is > 70 */
    /* characters. It is reformatted as if it is an ISP    */
    /* command. Dave 2 Feb 2001                            */
    /*******************************************************/
    /*******************************************************/
    IF  (MODE = "BATCH") & (BATCHOPT = 0) THEN DO
      BJCL.1 = PGMNAME BATCH_VARS
      IF ((LENGTH(BJCL.1) > 70) & (index(pgmname,"%") <> 1)) THEN DO
        PARSE VAR BATCH_VARS  TZ.1 TZ.2 TZ.3 TZ.4 TZ.5 TZ.6
        /*******************************************************/
        /* lets chop up the long command for readability      **/
        /*******************************************************/
        BJCL.1 = PGMNAME  TZ.1 TZ.2 " -"
        BATCH_VARS = "  " TZ.3 TZ.4 TZ.5 TZ.6
        BJCL.2 = BATCH_VARS"   "
        ADDRESS MVS "EXECIO 2 DISKW BJCL (FINIS STEM BJCL.)"
        BJCL.1 = " " /* clear the var for the fall thru write */
      END
      IF INDEX(PGMNAME,"%") =  1 THEN do
        BJCL.1 = "ISPSTART CMD("PGMNAME BATCH_VARS") NEWAPPL(TSS)"
        IF LENGTH(BJCL.1) > 70 THEN DO
          BJCL.1 = "ISPSTART -"
          BJCL.2 = " CMD("PGMNAME" -"
          BJCL.3 = BATCH_VARS") -"
          ADDRESS MVS "EXECIO 3 DISKW BJCL (FINIS STEM BJCL.)"
          /*******************************************************/
          /* THE LINE BELOW WILL BE WRITTEN BY THE FALLTHRU AREA */
          /*******************************************************/
          BJCL.1 = " NEWAPPL(TSS)"
          BJCL.2 = "BJCL.2"
        END
      END
      IF TRAP_FLAG = "NO" THEN
        SAY "THE BATCH FILE IS UPDATED, COMMAND IS " BJCL.1 BJCL.2
      ADDRESS MVS "EXECIO 1 DISKW BJCL (FINIS STEM BJCL.)"
      SIGNAL NOMSG
    END
    IF  (MODE = "BATCH") & (BATCHOPT = 1) THEN DO
      IF TRAP_FLAG = "NO" THEN
        SAY "DYNAM: THE BATCH FILE IS BEING ALLOCATED DISP = MOD"
      ADDRESS TSO "ALLOC DDN(BJCL) DSN(" DS5") MOD REUS"
      BOPEN = YES
    END
    ADDRESS ISPEXEC "VPUT (ACID DATA DATA2) PROFILE"
    IF (TRAPOPT = "OFF") | (TRAPOPT = 0) THEN
      SS = OUTTRAP(OFF)
    IF TRAP_FLAG = "NO" THEN
      SAY "ADDRESS TSO" PGMNAME BATCH_VARS
    IF TRAP_FLAG = "YES" THEN DO
      IF DATATYPE(INT.0) /= "NUM" THEN INT.0 = 0
      INT.0 = INT.0 + 1
      HOLDTEMP = INT.0
      INT.HOLDTEMP = "ADDRESS TSO" PGMNAME BATCH_VARS
      HOLDTEMP = HOLDTEMP + 1
      INT.HOLDTEMP = "*********************************************"
      HOLDTEMP = HOLDTEMP + 1
      INT.HOLDTEMP = "****CONTROL IS BEING ROUTED TO DYNAMIC COMMAND"
      HOLDTEMP = HOLDTEMP + 1
      INT.HOLDTEMP = "*********************************************"
      INT.0 = HOLDTEMP
    END
    ADDRESS "TSO" PGMNAME BATCH_VARS
    IF (TRAPOPT = "LOG") & (LOG_CHECK = "OK")  THEN DO
      time1 = time()
      ADDRESS tso  "%rxappend "logdsn today time1 pgmname batch_vars
      LOG. = ""
      LOG.0 = 0
    end
    IF (TRAPOPT = "LOGALL") & (LOG_CHECK = "OK")  THEN DO
      ADDRESS TSO "ALLOC DDN(OUT1) DSN("DS3") SHR REUS"
      ADDRESS MVS "EXECIO "INT.0" DISKW OUT1 ( FINIS STEM INT.)"
      ADDRESS TSO "FREE DDN(OUT1)"
      ADDRESS TSO "ALLOC DDN(OUT1) DSN("DS3") MOD"
      writenum = trapnum
      do tcnt = 1 to trapnum
        if on.tcnt = "ON."TCNT then writenum = tcnt
        if on.tcnt = "ON."TCNT then leave
      end
      ADDRESS MVS "EXECIO "writenuM" DISKW OUT1 ( FINIS STEM ON.)"
      ADDRESS TSO "FREE DDN(OUT1)"
      ADDRESS tso  "%rxappend " logdsn "DSN="DS3
      LOG. = ""
      LOG.0 = 0
    end
    /******************************/
    /** FUTURE CMD STACKING ENDDO**/
    /** GOES HERE.               **/
    /******************************/
    IF TRAP_FLAG = "YES" THEN
      SS = OUTTRAP(ON.,TRAPNUM)
    ELSE
      SS = OUTTRAP(OFF)
    ZPF07 = "UP"
    ZPF19 = "UP"
    ZPF08 = "DOWN"
    ZPF20 = "DOWN"
    ADDRESS ISPEXEC "VPUT ZPF07  PROFILE"
    ADDRESS ISPEXEC "VPUT ZPF19  PROFILE"
    ADDRESS ISPEXEC "VPUT ZPF08  PROFILE"
    ADDRESS ISPEXEC "VPUT ZPF20  PROFILE"
    IF MSGOPT = 0 THEN SIGNAL NOMSG
    IF MSGOPT = "DATA" THEN DO
      ADDRESS ISPEXEC "VGET DATAAREA PROFILE"
      ACID = DATAAREA
      if panel_env = "BASIC" then do
        INT.0 = INT.0 + 1
        HOLDTEMP = INT.0
        INT.HOLDTEMP = "TSA520D: Overlaying " OPT "SECRC=" secrc
        secrc = "TSA519W:" dataarea
        ADDRESS ISPEXEC "VPUt SECRC PROFILE"
      END
    END
    SIGNAL GETMSG
  END
  /************************************************/
  /**--------DYNAMIC COMMAND AREA ENDS ----------**/
  /**  OW LETS PROCESS THE USERS CMDLIST DSN     **/
  /**--------DYNAMIC COMMAND AREA ENDS ----------**/
  /************************************************/
/***********************************************************/
/* HERE WE START THE NORMAL OPTIONS AREA....DIR 19 OCT 92  */
/***********************************************************/
  IF (OPT = "STATUS") | (OPT = "STAT") THEN  DO
    PANEL= "SPISTAT"
    ADDRESS ISPEXEC "VPUT PANEL PROFILE"
    MSG= "VARIABLE ENTRIES DISPLAYED" OPT
    FUNCT = "STATUS"
    IF  PANEL = "SPISTAT" THEN
      OPT= "STATUS" /* HE MAY HAVE CHANGED PANEL */
    SIGNAL REDO
  END
  IF  OPT = "VARSET" THEN  DO
    IF AUTHNUM < 10 THEN DO
      SECRC =  "VARSET REQUIRES AUTHNUM OF 10, YOUR AUTHNUM IS" AUTHNUM
      SIGNAL GOTMSG
    END
    IF LENGTH(ACID) > 8 THEN DO
      SECRC = "VARIABLE NAME IS TOO LONG, VARSET ABORTED."
      SIGNAL GOTMSG
    END
    INTERPRET ACID "=" DATA
    IF TRAP_FLAG = "NO" THEN SAY "ISSUING THIS COMMAND :",
      "ADDRESS ISPEXEC VPUT " ACID "PROFILE"
    IF TRAP_FLAG = "YES" THEN DO
      INT.1 =  "ISSUING:ADDRESS ISPEXEC VPUT " ACID "PROFILE"
    END
    ADDRESS ISPEXEC "VPUT " ACID "PROFILE"
    SECRC = "VARIABLE" ACID" TEMPORARILY RESET IN CURRENT PROFILE."
    SIGNAL GOTMSG
  END
  IF  OPT = "VARRESET" THEN  DO
    IF AUTHNUM < 10 THEN DO
      SECRC =  "VARSET REQUIRES AUTHNUM OF 10, YOUR AUTHNUM IS" AUTHNUM
      SIGNAL GOTMSG
    END
    IF LENGTH(ACID) > 8 THEN DO
      SECRC = "VARIABLE NAME IS TOO LONG, VARRESET ABORTED."
      SIGNAL GOTMSG
    END
    if PANEL_ENV = "BASIC"  then do
      address tso "%popexp"
      call disppop
      acid = v1 ;data = v2; data2 = v3
    end
    IF ACID = "" THEN DO
      SECRC = " Variable NOT SPECIFIED. VARRESET ABORTED."
      SIGNAL GOTMSG
    END
    IF TRAP_FLAG = "NO" THEN SAY "ISSUING THIS COMMAND :",
      "ADDRESS ISPEXEC Verase " ACID "PROFILE"
    IF TRAP_FLAG = "YES" THEN DO
      INT.1 =  "ISSUING:ADDRESS ISPEXEC Verase" ACID "PROFILE"
    END
    ADDRESS ISPEXEC "Verase " ACID "PROFILE"
    secrc = "variable" acid" erased from current profile."
    SIGNAL GOTMSG
  END
  IF  OPT = "SHOWVAR" THEN  DO
    IF LENGTH(ACID) > 8 THEN DO
      secrc = "variable name is too long, function aborted."
      SIGNAL GOTMSG
    END
    if PANEL_ENV = "BASIC"  then do
      address tso "%popexp"
      call disppop
      acid = v1 ;data = v2; data2 = v3
    end
    hold = acid
    IF TRAP_FLAG = "YES" THEN DO
      INT.1 =  "ISSUING:ADDRESS ISPEXEC VGET " ACID "PROFILE"
    END
    ADDRESS ISPEXEC "VGET " ACID "PROFILE"
    SECRC = "Variable" ACID" =" value(acid)
    SIGNAL gotmsg
  END
  IF SUBSTR(OPT,1,1) = "." THEN  DO
    INDEX = SUBSTR(OPT,2)
    ADDRESS ISPEXEC "TBTOP "SCRTABLE
    ADDRESS ISPEXEC "TBVCLEAR "SCRTABLE
    INDEX1 = SUBSTR(INDEX,1,1)
    INDEX2 = SUBSTR(INDEX,2)
    UPPER INDEX1
    FNAME = INDEX1||INDEX2
    ADDRESS ISPEXEC "VPUT FNAME"
    CALL OFF ERROR
    ADDRESS ISPEXEC "TBSCAN "SCRTABLE" ARGLIST(FNAME) CONDLIST(GE)"
    RCODE1 = RC
    SCAN = "YES"
    Y = 0
    OPT     = " "
    IF RCODE1 = 8 THEN DO
      secrc = "Entry not found, or blanks exist in screen table"
      SAY "*********************************************************"
      SAY "SCREEN TABLE SCAN FAILED CHECK THAT SCREEN TABLE DOES NOT"
      SAY "HAVE LEADING BLANKS.                                     "
      SAY "*********************************************************"
      signal gotmsg
    END
    CALL ON ERROR NAME SHUCKS
    SIGNAL DISPPNL
  END
  IF  AUTHNUM < 4 THEN SIGNAL HUH
 /******************************************************************/
 /*  THE FOLLOWING FUNCTIONS ARE NOT GENERALLY NEEDED EXCEPT FOR   */
 /*  THE MOST POWERFUL ADMINISTRATORS. THIS IS WHY I CHECK AUTHNUM */
 /*  THIS ALLOWS THE FOLLOWING FUNCTIONS TO BE  EXECUTED FROM      */
 /*  THE TEST MENU........DAVE 20 MAY 91                           */
 /******************************************************************/
  IF OPT = "CLEARMSG"  THEN  DO
    CLEARMSG = "YES"
    ADDRESS ISPEXEC "VPUT CLEARMSG PROFILE"
    MSG2 = " "
    ADDRESS ISPEXEC "VPUT MSG2 PROFILE"
    secrc  = " Message areas cleared, message options reset "
    SIGNAL GOTMSG
  END
  IF (OPT = "SUB") &  (MODE = "BATCH") THEN  DO
    BJCL.1 =  "@@"
    ADDRESS MVS "EXECIO 1 DISKW BJCL (FINIS STEM BJCL.)"
    ADDRESS TSO "FREE DDN(BJCL)"
    BOPEN= NO
    ADDRESS TSO "SUBMIT " DS5
    msg2= "Note: You are in online mode, cmds are issued real time."
    CLEARMSG= "YES"
    MODE= "ONLINE"
    SECRC= "TSA044I: Mode change complete."
    secrc= secrc "batch stream submitted from "ds5"."
    SIGNAL GOTMSG
  END
  IF (OPT = "SUB") & (MODE = "ONLINE") THEN  DO
    SECRC= "THE SUB OPTION IS VALID ONLY IN BATCH MODE."
    SECRC=  SECRC" OPTION IGNORED"
    SIGNAL GOTMSG
  END
  IF (OPT = "BATCH") & (MODE < > "BATCH") THEN  DO
    ADDRESS TSO "%"TVER"JCARD" DS5 "RANDOM"
    IF  RC = 16 THEN  DO
      SECRC="TSA041E: Mode change failed during jobcard build."
      SIGNAL GOTMSG
    END
    ADDRESS TSO " ALLOC DDN(BJCL) DSN(" DS5") MOD REUS"
    BOPEN = YES
    msg2= "Note: You are in batch mode, most cmds are deferred "
    MSG2=   MSG2 "UNTIL MODE IS CHANGED."
    ADDRESS ISPEXEC "VPUT MSG2 PROFILE"
    CLEARMSG= "NO"
    ADDRESS ISPEXEC "VPUT clearmsg PROFILE"
    MODE = "BATCH"
    secrc= "TSA042I: mode change complete. jcl will be in "ds5"."
    SIGNAL GOTMSG
  END
  IF  (OPT = "ONLINE") & (MODE < > "ONLINE") THEN  DO
    BJCL.1 = "@@"
    ADDRESS MVS "EXECIO 1 DISKW BJCL (FINIS STEM BJCL.)"
    ADDRESS TSO " FREE DDN(BJCL)"
    BOPEN= NO
    msg2= "Note: You are in online mode cmds are issued real time."
    CLEARMSG= "YES"
    MODE= "ONLINE"
    SECRC= "TSA043I: Mode change complete."
    secrc= secrc "JCL not submitted, is in "ds5"."
    SIGNAL GOTMSG
  END
  IF  (OPT = "ONLINE") & (MODE = "ONLINE") THEN  DO
    MSG2= "NOTE: MODE IS UNCHANGED."
    CLEARMSG= "YES"
    MODE= "ONLINE"
    secrc= "TSA052I: Mode unchanged, remains online."
    SIGNAL GOTMSG
  END
  IF  OPT = "CMDO" THEN  DO
  /*OTT = OUTTRAP(ZZT,0)     TRAP EVERYTHING */
    DATAAREA =  ACID
    ARG =  DATAAREA
   " ISPEXEC VPUT ARG PROFILE"
   ADDRESS TSO "%"TVER"CMDO" DS1
    FUNCT= "CMDOUT"
    SIGNAL GETMSG
  END
  /***************************************************************/
  /** THE FOLLOWING OPTIONS USE THE T..TSO ROUTINE FOR CHANGING **/
  /** THE TOP SECRET TSO DEFINITIONS.  THE T44TSO ROUTINE       **/
  /** REQUIRES THE FOLLOWING PARMS :  ACTION ACID LPROC ACCTNUM **/
  /** UNIT SIZE DESPITE THE FACT ALL THESE MAY NOT BE USED FOR  **/
  /** EACH FUNCTION I PASS THEM ALL EACH TIME AS THEY ARE       **/
  /** POSITIONALLY DEPENDANT...DIR 2 JUNE 94                    **/
  /***************************************************************/
  /***************************************************************/
  /** THE END OF THE T44TSO AREA                                **/
  /***************************************************************/
  IF  OPT = "POPTEST" THEN  DO
    FUNCT =  "POPTEST"
    TITLE  = "TEST SCREEN TITLE       "
    TITLE1 = "#BOOK TO BE DELETED       "
    VNAME1 = "THIS IS THE BOOK SPOT     "
    CALL DISPPOP
    SAY V1 V2 V3 V4 V5 V6
  END
  HUH: NOP
  secrc= "TSA006I: Invalid option, or security failure for option" opt
  SIGNAL GOTMSG
  GETMSG: NOP
  ADDRESS ISPEXEC "VGET SECRC PROFILE"
  ADDRESS ISPEXEC "VGET MSG2 PROFILE"
  SIGNAL GOTMSG
  NOMSG: NOP
  secrc= "TSA030I: Function completed successfully."
  IF RCODE >  0 THEN
    secrc=  "TSA031I: Function completed with a return code of" rcode
  IF RCODE =  8 THEN  DO
    SECRC=  "TSA045E: Invoked function returned a code of" rcode
  END
  GOTMSG: IF (OPT < > "L") & (OPT < > "IN"),
    & (MODE < > "BATCH") THEN OPT =   " "
  MSG = SECRC
  ADDRESS ISPEXEC "VPUT MSG2 PROFILE" /* IN CASE I SET A MSG */
  SYSOUTTRAP= TRAPNUM
  /******************************************************************/
  /* NOMSG IS THE JUMP TO POINT (JTP) FOR FUNCTIONS THAT  DO NOT    */
  /* RETURN A MESSAGE IN VAR SECRC. GETMSG IS FOR OTHERS THAT DO    */
  /*   ......DAVE 9 APRIL 91                                        */
  /* NOTE THAT YOU MUST SAVE THE RC IN VARIABLE RCODE FOR JTP       */
  /* NOMSG....DAVE 9 APRIL 91                                       */
  /******************************************************************/
  REDO: RCODE=0 /*A JTP TO KEEP OPTION */
  ADDRESS ISPEXEC "VPUT SECRC PROFILE" /* IN CASE I SET A MSG */
  if substr(strip(msg),1,3) /= "TSA" then
    MSG =    FUNCT ":" MSG
SIGNAL DISPPNL
/*******************************************************************/
/** END OF SEQUENTIAL INSTRUCTIONS                                **/
/*******************************************************************/
DISPPOP: NOP
call off error
ADDRESS ISPEXEC "ADDPOP POPLOC(OPT) "
cursor = "v1"
redopop: NOP
PNL_DISP = "YES"
address ispexec "vput opt profile"
address ispexec "vget (title1 title2 title3 title4 title5 title6)"
address ispexec "vget (vname1 vname2 vname3 vname4 vname5 vname6)"
ADDRESS ISPEXEC "DISPLAY PANEL(SPIPOP) cursor("cursor")"
pop_rc = rc
call off error
if pop_rc = 0 then do
  /* say "calling checkdat"  */
  call checkdat v1 v2 v3 v4 v5 v6
  /* Say "result is " result */
  if result = "REDO" then signal redopop
end
call on error name shucks
PNL_DISP = "NO"
ADDRESS ISPEXEC "REMPOP"
cursor = "OPT"
RETURN
SHUCKS: PROCEDURE EXPOSE RC PNL_DISP PANEL MSG SIGL DEFPNL RCODE,
  BOPEN OPT ACID DS1 DS2 DS3 DS4 DS5 DEF DS6 SECRC TRAP_FLAG,
  TVER LEAVE CMDTABLE SCRTABLE LOG_CHECK panel_depth dp.,
  command_stack panel_env scrload
  RCODE = RC
  IF TRAP_FLAG = "NO" THEN
    say "TSA101D:  error routine has been signaled by line" sigl
  IF RCODE = 0 THEN LEAVE = "YES"
  RC = 0
  "ISPEXEC VPUT ACID PROFILE"
  ERRORL = SIGL
  PANELRC = 0
  /* SAY "LINE # " ERRORL "CAUSED AN ERROR" */
  IF RCODE = 24 THEN EXIT 24 /* APPL PARM ERROR IN TSSINI */
  IF RCODE = 8 THEN DO
    IF PNL_DISP = "YES" THEN DO
      IF PANEL = "SPIMAIN" THEN LEAVE = YES
      IF PANEL = "SPIUTIL" THEN LEAVE = YES
      IF PANEL = "SPIUSER" THEN LEAVE = YES
      IF PANEL = DEFPNL THEN LEAVE = YES
      if panel_depth > 0 then do
        panel_depth = panel_depth - 1
        panel = dp.panel_depth
        address ispexec "vput panel profile"
        do pcount = 1 to panel_depth
          drop_loc = lastpos(".",command_stack)
          drop_loc = drop_loc - 1
          /* say "drop loc = " drop_loc */
          if drop_loc < 0 then drop_loc = 1
          command_stack = substr(command_stack,1,drop_loc)
          /* say "Shucks: command stack" command_stack  */
        end
      end
    END
  END
  /* PANEL = DEFPNL */
  ADDRESS ISPEXEC "VPUT PANEL PROFILE"
  OPT = "NIL"
  msg = "TSA047E: Line "sigl" returned a return code of " rcode
  IF RCODE = -3 THEN DO
    hz1 = sourceline(sigl)
    secrc = "TSA048E: Possible environmental error. check tver setting"
    "ISPEXEC VPUT SECRC PROFILE"
  END
  IF LEAVE = "YES" THEN DO
    IF BOPEN = "YES" THEN DO
      BJCL.1 =  "@@"
      ADDRESS MVS "EXECIO 1 DISKW BJCL (FINIS STEM BJCL.)"
      ADDRESS TSO "FREE DDN(BJCL)"
      BOPEN = "NO"
    END
    "ISPEXEC VPUT TVER PROFILE "
    "ISPEXEC VPUT DS1 PROFILE  "
    "ISPEXEC VPUT DS2 PROFILE  "
    "ISPEXEC VPUT DS3 PROFILE  "
    "ISPEXEC VPUT DS4 PROFILE  "
    "ISPEXEC VPUT DS6 PROFILE  "
    "ISPEXEC VPUT DS5 PROFILE  "
    "ISPEXEC VPUT DEF PROFILE  "
    SIGNAL OFF ERROR
    "ISPEXEC TBEND "CMDTABLE
    if scrload = "YES" then
      "ISPEXEC TBEND "SCRTABLE
     EXIT
  END
  RETURN
NOTABLE: PROCEDURE EXPOSE RC SIGL CMDTABLE SCRTABLE TABLEOPT
  ERRORL = SIGL
  SAY "LINE # " ERRORL "INVOKED ERROR RECOVERY"
  SAY "*********************************************************"
  SAY "** FATAL ERROR FATAL ERROR FATAL ERROR FATAL ERROR     **"
  SAY "*********************************************************"
  SAY "TSSUT: AN OPEN WAS ISSUED FOR ONE OR MORE TABLES THAT DO "
  SAY "       NOT EXIST. OR ARE ALREADY OPEN !                  "
  SAY "       USE THE TBMCMD OR TBMSCR TO CREATE TABLES:"
  SAY "       " CMDTABLE SCRTABLE
  SAY "*********************************************************"
  IF TABLEOPT= "PERM" THEN DO
    TABLEOPT = "TEMP"
    ADDRESS ISPEXEC "VPUT TABLEOPT PROFILE"
    SAY "*********************************************************"
    SAY " I AM CHANGING TABLE OPTION TO TEMP, PLEASE REINVOKE     "
    SAY " THE PANEL SYSTEM TO READ   TABLES FROM FLATFILE INPUT.  "
    SAY " CONFIRM THAT YOU ARE CORRECTLY SET UP TO USE PERMANENT  "
    SAY " TABLE INPUTS. THE TABLE NAMES ARE BELOW.                "
    SAY "       " CMDTABLE SCRTABLE
    SAY "*********************************************************"
  END
  EXIT
/*******************************************************************/
/*******************************************************************/
/*******************************************************************/
/*******************************************************************/
checkdat: procedure expose msgopt datack data2ck auth trapopt batch,
  msg cursor
arg the_data
PARSE VAR the_data W.1 W.2 W.3 W.4 W.5 W.6 W.7
crit.1 = "NUM" ;result.1 ="NUM" ; desc.1 = "numeric"
crit.2 = "OPTN";result.2 ="NUM" ; desc.2 = "numeric"
crit.3 = "CHAR";result.3 ="CHAR"; desc.3 = "character"
crit.4 = "OPTC";result.4 ="CHAR"; desc.4 = "character"
ecode = ""
cursor = "v1"
address ispexec "vget datareq profile"
/*  say "checking data" the_data */
/* say "             " datareq   */
do dchk = 1 to 6
  check_value  = w.dchk
  requirement  = word(datareq,dchk)
  if requirement = 0 then iterate
  if requirement = "" then iterate
  do cnt2 = 1 to 6
    if requirement = crit.cnt2 then critnum = cnt2
  end
  len = length(check_value)
  description  = desc.critnum
  if (requirement = "CHAR") & ( len = 0) then requirement = "failed"
  /* say "checking" check_value "versus" requirement dchk */
  dacheck = datatype(check_value)
  /* say " check is " dacheck  */
  if requirement = "ANY" then requirement = dacheck
  if requirement /= dacheck then do
    MSG = "TSA038E:"
    msg = msg "A "description" value is required for this function"
    cursor = "V"dchk
    ecode = "REDO"
    return ecode
  end
end
return
NEWINI: PROCEDURE EXPOSE RC SIGL MSG2 CLEARMSG AUTOINIT NEEDINIT RCODE
  RCODE = RC
  RC = 0
  ERRORL = SIGL
  PANELRC = 0
  hz1 = sourceline(sigl)
  SAY "LINE # " ERRORL "INVOKED ERROR RECOVERY"
  SAY HZ1
  IF RCODE = 8 THEN DO
    MSG2 = "$$ WARNING: TSSINI VARIABLES NOT FOUND. LINE " SIGL
    MSG2 = MSG2 "A 'REINIT' SHOULD BE ISSUED."
    ADDRESS ISPEXEC "VPUT MSG2 PROFILE"
    CLEARMSG = "NO"
    IF AUTOINIT ¬= "NO" THEN DO
      INI = "NO"
      "ISPEXEC VPUT INI PROFILE"
      NEEDINIT = "YES"  /* TELL MAIN ROUTINE TO REINIT */
      MSG2 = "$$ NOTE: VARIABLES NOT FOUND. TSSINI WAS REINVOKED"
      MSG2 = MSG2 "TO REBUILD YOUR ENVIRONMENT"
      ADDRESS ISPEXEC "VPUT MSG2 PROFILE"
    END
  END
  OPT = " "
  RETURN
LOG:
  ARG message parm funct
  upper funct parm
  if funct = "" then funct = "APPEND"
  Select
    when funct = "INIT" then do
      /* log(debug,100,init) */
      log.message.0max = parm
      if datatype(parm) /= "NUM" then return 4
    end
    when funct = "APPEND" then do
      /* log(my log message,debug,append) */
      if datatype(log.parm.0) /= "NUM" then log.parm.0 = 0
      /* above inits a new log var */
      hold = log.parm.0 + 1
      if hold > log.parm.0max then log.parm.0wrap = "YES"
      if hold > log.parm.0max then hold = 1
      /* if we are at max then start at #1 again */
      log.parm.hold = parm
      log.parm.0 = hold        /* update the tracker subscript */
    end
    when funct = "DUMP" then do
      /* log(ddname,debug,dump) */
      ddname = message
      lines = log.parm.0
      stem = "log."parm"."
      savemax = log.parm.0max
      if log.parm.0wrap = "YES" then lines = log.parm.0max
      if datatype(log.parm.0) /= "NUM" then log.parm.0 = 0
      /* above inits a new log var */
      ADDRESS MVS "EXECIO "lines" DISKW "ddname" ( FINIS STEM "stem")"
      log.parm. = ""
      log.parm.0max = savemax
      log.parm.0 = 0            /* reset my array */
    end
    otherwise "DISPLAY PANEL("PANEL") CURSOR("CURSOR")"
   End
PTR:
  ARG VALUE
  RETURN X2C(C2X(STORAGE(D2X(VALUE),4)))
